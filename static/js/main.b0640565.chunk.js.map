{"version":3,"sources":["FilterDefinitions.ts","BoardGameActions.ts","components/BoardGameTile.tsx","components/BoardGameInspector.tsx","components/BoardGameGallery.tsx","components/searchbar/SortSelect.tsx","components/searchbar/SearchField.tsx","components/searchbar/filters/RangeSliderFilter.tsx","components/searchbar/filters/YearPublishedFilter.tsx","components/searchbar/filters/CheckListFilter.tsx","components/searchbar/filters/FilterList.tsx","components/searchbar/FilterDrawer.tsx","BoardGameGeekAPI.ts","components/SearchBar.tsx","components/DisplayMode.tsx","index.tsx","App.tsx"],"names":["FilterDefinitions","rangeFilter","gameMin","gameMax","rangeMin","rangeMax","listFilter","gameList","filterList","length","some","val","includes","game","filter","minplayers","maxplayers","min","max","minplaytime","maxplaytime","yearpublished","boardgamecategory","boardgamemechanic","boardgamefamily","boardgamedesigner","boardgameartist","boardgamepublisher","ascendingSorts","BoardGameActions","sortBoardGames","games","sortKey","sort","gameOne","gameTwo","localeCompare","filterBoardGames","filters","Object","keys","map","filterKey","getFilterData","incrementEntry","obj","hasOwnProperty","reduce","filterData","minPlayerCount","Math","maxPlayerCount","minPlayTime","maxPlayTime","years","arr","push","category","mechanic","family","designer","artist","publisher","Infinity","BoardGameTile","props","className","onClick","id","src","image","alt","name","GridListTileBar","title","icon","faUser","faClock","BoardGameInspector","Button","closeDrawer","variant","prop","advInfo","key","join","description","trim","BoardGameGallery","useState","selectedGameId","setSelectedGameId","theme","useTheme","extraLarge","useMediaQuery","breakpoints","only","large","medium","small","filteredSortedGames","GridList","cols","cellHeight","GridListTile","Drawer","open","onClose","anchor","console","log","SortSelect","inputLabel","useRef","labelWidth","setLabelWidth","useEffect","current","offsetWidth","FormControl","InputLabel","ref","htmlFor","Select","native","value","currentSort","onChange","e","selectSort","target","inputProps","display","sortable","SearchField","search","setSearch","updateUsername","setUsername","urlParams","URLSearchParams","window","location","has","get","OutlinedInput","onKeyUp","charCode","endAdornment","InputAdornment","position","IconButton","edge","faSearch","RangeSliderFilter","currentFilter","range","setValue","classes","Typography","gutterBottom","Slider","event","newValue","onChangeCommitted","filterValue","setFilter","valueLabelDisplay","aria-labelledby","track","marks","step","YearPublishedFilter","minYear","maxYear","indexOf","sliderValues","filterYears","CheckListFilter","seeAll","setSeeAll","sortedOptions","options","optionOne","optionTwo","handleChange","filterCat","renderOptionCheckbox","option","toLocaleLowerCase","FormControlLabel","control","Checkbox","color","checked","label","Chip","slice","Collapse","in","unmountOnExit","FilterList","collection","setFilters","gameData","rangeFilters","List","disablePadding","ListSubheader","ListItem","undefined","results","newFilter","yearPublishedFilter","filterName","resultsObject","FilterDrawer","drawerOpen","setDrawerOpen","filterNumber","setFilterNumber","updateCollectionFilters","setCollectionFilter","disableFiltersButton","disabled","size","getTagValue","elem","getElementsByTagName","getAttribute","getLinkValue","Array","from","querySelectorAll","link","BoardGameGeekAPI","getCollectionForUser","username","fetch","then","response","text","DOMParser","parseFromString","xmlCollectionResponse","Promise","all","collectionItem","getBoardGame","catch","error","a","xmlThingResponse","thing","querySelector","innerHTML","replace","thumbnail","playingtime","SearchBar","updateCollection","setCollection","userCollection","AppBar","Toolbar","disableGutters","collectionSort","setCollectionSort","setCollectionFilters","DisplayMode","ReactDOM","render","gallery","collectionFilters","displayMode","setDisplayMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0640565.chunk.js","sourcesContent":["type FilterDefinitionType = Record<string, (...args: any) => boolean>;\n\nconst FilterDefinitions: FilterDefinitionType = {\n\trangeFilter: (gameMin: number, gameMax: number, rangeMin: number, rangeMax: number) => {\n    \treturn (\n    \t\t(gameMin >= rangeMin ||\n    \t\tgameMax >= rangeMin) &&\n    \t\t(gameMin <= rangeMax ||\n    \t\tgameMax <= rangeMax)\n    \t);\n\t},\n\tlistFilter: (gameList: string[], filterList: string[]) => {\n    \tif (filterList.length) {\n    \t\treturn gameList.some(val => filterList.includes(val));\n    \t} else {\n        \treturn true;\n    \t}\n\t},\n\t'playercount': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.rangeFilter(game.minplayers, game.maxplayers, filter.min, filter.max);\n\t},\n    'playtime': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.rangeFilter(game.minplaytime, game.maxplaytime, filter.min, filter.max);\n\t},\n    'yearpublished': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.rangeFilter(game.yearpublished, game.yearpublished, filter.min, filter.max);\n\t},\n    'boardgamecategory': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamecategory, filter);\n\t},\n    'boardgamemechanic': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamemechanic, filter);\n\t},\n    'boardgamefamily': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamefamily, filter);\n\t},\n    'boardgamedesigner': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamedesigner, filter);\n\t},\n    'boardgameartist': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgameartist, filter);\n\t},\n    'boardgamepublisher': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamepublisher, filter);\n\t},\n};\n\nexport default FilterDefinitions;\n","import FilterDefinitions from './FilterDefinitions';\n\nconst ascendingSorts = ['maxplayers'];\n\nconst BoardGameActions = {\n\tsortBoardGames: (games: Array<Record<string, any>>, sortKey: string) => {\n        games.sort((gameOne, gameTwo) => {\n            if (ascendingSorts.includes(sortKey)) {\n                return gameTwo[sortKey] - gameOne[sortKey];\n            } else if (sortKey === 'name') {\n\t\t\t\treturn gameOne[sortKey].localeCompare(gameTwo[sortKey]);\n            } else {\n            \treturn gameOne[sortKey] - gameTwo[sortKey];\n            }\n    \t});\n\n    \treturn games;\n\t},\n\tfilterBoardGames: (games: Array<Record<string, any>>, filters: Record<string, any>) => {\n\t\treturn games.filter(game => {\n\t\t\tconst filterBools = Object.keys(filters).map(filterKey => {\n\t\t\t\treturn FilterDefinitions[filterKey](game, filters[filterKey]);\n\t\t\t});\n\n\t\t\treturn !filterBools.includes(false);\n\t\t});\n\t},\n\tgetFilterData: (games: Array<Record<string, any>>) => {\n        const addIfNotPresent = (arr: string[], val: string) => {\n\t\t\tif (!arr.includes(val)) {\n    \t\t\tarr.push(val);\n    \t\t\tarr.sort();\n\t\t\t}\n\t\t\t\n\t\t\treturn arr;\n    \t};\n\n    \tconst incrementEntry = (obj: Record<string, number>, val: string) => {\n\t\t\tif (obj.hasOwnProperty(val)) {\n    \t\t\tobj[val] += 1;\n\t\t\t} else {\n    \t\t\tobj[val] = 1;\n\t\t\t}\n\n\t\t\treturn obj;\n    \t};\n\n    \treturn games.reduce((filterData: Record<string, any>, game: Record<string, any>) => {\n        \treturn {\n\t\t\t\tminPlayerCount: Math.min(filterData.minPlayerCount, game.minplayers),\n\t\t\t\tmaxPlayerCount: Math.max(filterData.maxPlayerCount, game.maxplayers),\n\t\t\t\tminPlayTime: Math.min(filterData.minPlayTime, game.minplaytime),\n\t\t\t\tmaxPlayTime: Math.max(filterData.maxPlayTime, game.maxplaytime),\n\t\t\t\tyears: addIfNotPresent(filterData.years, game.yearpublished),\n                category: game.boardgamecategory.reduce(incrementEntry, filterData.category),\n    \t\t\tmechanic: game.boardgamemechanic.reduce(incrementEntry, filterData.mechanic),\n    \t\t\tfamily: game.boardgamefamily.reduce(incrementEntry, filterData.family),\n    \t\t\tdesigner: game.boardgamedesigner.reduce(incrementEntry, filterData.designer),\n    \t\t\tartist: game.boardgameartist.reduce(incrementEntry, filterData.artist),\n    \t\t\tpublisher: game.boardgamepublisher.reduce(incrementEntry, filterData.publisher)\n        \t};\n    \t}, {\n\t\t\tminPlayerCount: Infinity,\n\t\t\tmaxPlayerCount: -Infinity,\n\t\t\tminPlayTime: Infinity,\n\t\t\tmaxPlayTime: -Infinity,\n\t\t\tyears: [],\n\t\t\tcategory: {},\n\t\t\tmechanic: {},\n\t\t\tfamily: {},\n\t\t\tdesigner: {},\n\t\t\tartist: {},\n\t\t\tpublisher: {}\n       \t});\n\t}\n};\n\nexport default BoardGameActions;\n","import React from 'react';\n\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faClock } from '@fortawesome/free-solid-svg-icons';\n\ntype BoardGameTileProps = {\n\tgame: Record<string, any>;\n\tonClick: (id: string) => void;\n};\n\nexport default function BoardGameTile(props: BoardGameTileProps) {\n    const renderTitle = () => {\n        return (\n    \t\t<div className='game-info-bar'>\n    \t\t\t<div className='title'>{props.game.name}</div>\n    \t\t\t<div className='players'>\n    \t\t\t\t<FontAwesomeIcon icon={faUser} />\n    \t\t\t\t{(props.game.minplayers === props.game.maxplayers) ? (\n    \t\t\t\t\t`${props.game.minplayers}`\n    \t\t\t\t) : (\n    \t\t\t\t\t`${props.game.minplayers}-${props.game.maxplayers}`\n    \t\t\t\t)}\n    \t\t\t</div>\n    \t\t\t<div className='time'>\n    \t\t\t\t<FontAwesomeIcon icon={faClock} />\n    \t\t\t\t{(props.game.minplaytime === props.game.maxplaytime) ? (\n    \t\t\t\t\t`${props.game.minplaytime}`\n    \t\t\t\t) : (\n    \t\t\t\t\t`${props.game.minplaytime}-${props.game.maxplaytime}`\n    \t\t\t\t)}\n    \t\t\t</div>\n    \t\t</div>\n        );\n    };\n\n\treturn (\n\t\t<div className='board-game-tile' onClick={() => props.onClick(props.game.id)}>\n\t\t\t<img src={props.game.image} alt={props.game.name} className='bg-thumbnail' />\n\t\t\t<GridListTileBar title={renderTitle()} />\n\t\t</div>\n\t);\n};\n","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\n\ntype BoardGameInspectorProps = {\n\tgame: Record<string, any>;\n\tcloseDrawer: () => void;\n};\n\nexport default function BoardGameInspector(props: BoardGameInspectorProps) {\n    const game = props.game;\n\n\treturn (\n\t\t<div className='inspector-container'>\n\t\t\t<Button\n\t\t\t\tonClick={() => props.closeDrawer()}\n\t\t\t\tclassName='close-btn'\n\t\t\t\tvariant='outlined'\n\t\t\t>\n\t\t\t\tClose\n\t\t\t</Button>\n    \t\t<div className='board-game-info'>\n    \t\t\t<div className='cover'>\n        \t\t\t<img src={game.image} alt={game.name} />\n    \t\t\t</div>\n        \t\t<div className='basic-info'>\n    \t\t\t\t<div className='title'>\n    \t\t\t\t\t<h2>{game.name}</h2>\n    \t\t\t\t</div>\n        \t\t\t<div className='players'>\n        \t\t\t\t<strong>Players<br /></strong>\n    \t\t\t\t\t{\n    \t\t\t\t\t\t(game.minplayers === game.maxplayers) ?\n    \t\t\t\t\t\t`${game.minplayers}` :\n    \t\t\t\t\t\t`${game.minplayers}-${game.maxplayers}`\n    \t\t\t\t\t}\n            \t\t</div>\n            \t\t<div className='playtime'>\n        \t\t\t\t<strong>Playing Time<br /></strong>\n    \t\t\t\t\t{\n    \t\t\t\t\t\t(game.minplaytime === game.maxplaytime) ?\n    \t\t\t\t\t\t`${game.minplaytime}` :\n    \t\t\t\t\t\t`${game.minplaytime}-${game.maxplaytime}`\n    \t\t\t\t\t}\n            \t\t</div>\n            \t\t<div className='yearpublished'>\n    \t\t\t\t\t<strong>Year Published<br /></strong>\n        \t\t\t\t{game.yearpublished}\n            \t\t</div>\n            \t</div>\n    \t\t\t<div className='advanced-info'>\n    \t\t\t\t{[\n        \t\t\t\t{title: 'Categories', prop: 'boardgamecategory'},\n        \t\t\t\t{title: 'Mechanics', prop: 'boardgamemechanic'},\n        \t\t\t\t{title: 'Families', prop: 'boardgamefamily'},\n        \t\t\t\t{title: 'Designers', prop: 'boardgamedesigner'},\n        \t\t\t\t{title: 'Artists', prop: 'boardgameartist'},\n        \t\t\t\t{title: 'Publishers', prop: 'boardgamepublisher'},\n            \t\t].map(advInfo => {\n    \t\t\t\t\treturn (\n    \t\t\t\t\t\t<div className={advInfo.prop} key={advInfo.prop}>\n    \t\t\t\t\t\t\t<strong>{advInfo.title}<br /></strong>\n    \t\t\t\t\t\t\t{game[advInfo.prop].join(', ')}\n    \t\t\t\t\t\t</div>\n    \t\t\t\t\t);\n                \t})}\n    \t\t\t</div>\n        \t\t<div className='description'>\n        \t\t\t<strong>Description<br /></strong>\n        \t\t\t<p>{game.description.trim()}</p>\n        \t\t</div>\n    \t\t</div>\n    \t</div>\n\t);\n};\n","import React, { useState } from 'react';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Drawer from '@material-ui/core/Drawer';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\n\nimport BoardGameActions from '../BoardGameActions';\nimport BoardGameTile from './BoardGameTile';\nimport BoardGameInspector from './BoardGameInspector';\n\nimport './BoardGameGallery.css';\n\ntype BoardGameGalleryProps = {\n\tgames: Array<Record<string, any>>;\n\tsort: string;\n\tfilters: Record<string, any>;\n};\n\nexport default function BoardGameGallery(props: BoardGameGalleryProps) {\n\tconst [selectedGameId, setSelectedGameId] = useState('' as string | null);\n\n    const theme = useTheme();\n    const extraLarge = useMediaQuery(theme.breakpoints.only('xl'));\n    const large = useMediaQuery(theme.breakpoints.only('lg'));\n    const medium = useMediaQuery(theme.breakpoints.only('md'));\n    const small = useMediaQuery(theme.breakpoints.only('sm'));\n\n    const getColumnNum = () => {\n\t\tif (extraLarge) {\n    \t\treturn 5;\n\t\t} else if (large) {\n    \t\treturn 4;\n\t\t} else if (medium) {\n    \t\treturn 3;\n\t\t} else if (small) {\n    \t\treturn 2;\n\t\t} else {\n    \t\treturn 1;\n\t\t}\n    };\n\n    const filteredSortedGames = BoardGameActions.sortBoardGames(\n    \tBoardGameActions.filterBoardGames(\n    \t\tprops.games,\n    \t\tprops.filters\n    \t),\n    \tprops.sort\n    );\n\n    const renderBoardGame = (game: Record<string, any>) => {\n        return (\n\t\t\t<GridListTile key={game.id}>\n\t\t\t\t<BoardGameTile game={game} onClick={() => setSelectedGameId(game.id)} />\n\t\t\t\t<Drawer\n\t\t\t\t\tclassName='board-game-inspector'\n\t\t\t\t\topen={selectedGameId === game.id}\n\t\t\t\t\tonClose={() => setSelectedGameId(null)}\n\t\t\t\t\tanchor='bottom'\n\t\t\t\t>\n\t\t\t\t\t<BoardGameInspector game={game} closeDrawer={() => {\n    \t\t\t\t\tsetSelectedGameId(null);\n    \t\t\t\t\tconsole.log(selectedGameId);\n    \t\t\t\t}} />\n\t\t\t\t</Drawer>\n\t\t\t</GridListTile>\n        );\n\t};\n\n\treturn (\n        <div className=\"board-game-gallery\">\n            <GridList cols={getColumnNum()} cellHeight={250}>\n        \t\t{filteredSortedGames.map(renderBoardGame)}\n      \t\t</GridList>\n      \t</div>\n\t);\n}\n\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\n\ntype SortSelectProps = {\n    currentSort: string;\n\tselectSort: (sort: string) => void;\n};\n\nexport default function SortSelect(props: SortSelectProps) {\n    const sortableColumns = [\n\t\t{name: 'name', display: 'Name'},\n\t\t{name: 'yearpublished', display: 'Year Published'},\n    \t{name: 'minplayers', display: 'Minimum Players'},\n        {name: 'maxplayers', display: 'Maximum Players'},\n        {name: 'playingtime', display: 'Play Time'}\n    ];\n\n    const inputLabel = useRef<HTMLLabelElement>(null);\n\tconst [labelWidth, setLabelWidth] = useState(0);\n\tuseEffect(() => {\n\t    setLabelWidth(inputLabel.current!.offsetWidth);\n\t}, []);\n\n\treturn (\n        <FormControl variant='outlined' className='search-bar-input collection-sort toolbar-button-container'>\n            <InputLabel ref={inputLabel} htmlFor='outlined-sort-native-simple'>Sort</InputLabel>\n            <Select\n                native\n                value={props.currentSort}\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => {\n                    props.selectSort(e.target.value as string);\n                }}\n                labelWidth={labelWidth}\n                inputProps={{\n                    name: 'sort',\n                    id: 'outlined-sort-native-simple',\n                }}\n            >\n                {sortableColumns.map(sortable => {\n                    return (\n                    \t<option value={sortable.name} key={sortable.name}>\n                    \t\t{sortable.display}\n                        </option>\n\t\t\t\t\t);\n                })}\n            </Select>\n        </FormControl>\n\t);\n};\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControl from '@material-ui/core/FormControl';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\ntype SearchFieldProps = {\n\tsetUsername: (username: string) => void;\n};\n\nexport default function SearchField(props: SearchFieldProps) {\n    let [search, setSearch] = useState('');\n\n    let updateUsername = props.setUsername;\n\n    useEffect(() => {\n        const urlParams = new URLSearchParams(window.location.search);\n\n        if (urlParams.has('username')) {\n\t\t\tupdateUsername(urlParams.get('username') as string);\n\t\t\tsetSearch(urlParams.get('username') as string);\n        }\n    }, [updateUsername]);\n\n    const inputLabel = useRef<HTMLLabelElement>(null);\n\tconst [labelWidth, setLabelWidth] = useState(0);\n\tuseEffect(() => {\n\t    setLabelWidth(inputLabel.current!.offsetWidth);\n\t}, []);\n\n    const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tif (e.charCode === 13 || e.key === 'Enter') {\n\t\t\tupdateUsername(search);\n\t\t}\n\t};\n\n    const renderSearchButton = () => {\n        return (\n\t\t\t<InputAdornment position='end'>\n                <IconButton\n                \tonClick={() => updateUsername(search)}\n                \tclassName='search-bar-button'\n                \tedge='end'\n                >\n                    <FontAwesomeIcon icon={faSearch} />\n                </IconButton>\n\t\t\t</InputAdornment>\n        );\n    };\n\n\treturn (\n        <FormControl className='search-bar-input username-search toolbar-button-container' variant='outlined'>\n            <InputLabel ref={inputLabel} htmlFor='username-search'>Username</InputLabel>\n\t\t\t<OutlinedInput\n                id='username-search'\n                value={search}\n                onKeyUp={handleKeyUp}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => { setSearch(e.target.value); }}\n                endAdornment={renderSearchButton()}\n                labelWidth={labelWidth}\n            />\n\t\t</FormControl>\n\t);\n};\n","import React, { useState } from 'react';\n\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\ntype RangeSliderFilterProps = {\n    title: string;\n    classes: string;\n\trange: Record<string, number>;\n\tcurrentFilter?: number[];\n\tstep?: number | null;\n\ttrack: false | 'normal' | 'inverted';\n\tsetFilter: (count: number[]) => void;\n};\n\nexport default function RangeSliderFilter(props: RangeSliderFilterProps) {\n\tconst [value, setValue] = useState(() => {\n\t\tif (props.currentFilter) {\n        \treturn props.currentFilter;\n        } else {\n            return [props.range.min, props.range.max];\n        }\n    });\n\n\tconst handleChange = (event: any, newValue: number | number[]) => {\n        setValue(newValue as number[]);\n\t};\n\n\tconst handleChangeCommit = (event: any, filterValue: number | number[]) => {\n\t\tprops.setFilter(filterValue as number[]);\n\t};\n    \n\treturn (\n\t\t<div className={`${props.classes} range-slider-filter`}>\n\t\t\t<Typography variant='h6' className='filter-list-item-title' gutterBottom>\n\t\t\t\t{props.title}\n\t\t\t</Typography>\n\t\t\t<Typography variant='subtitle1'>\n\t\t\t\t{value[0]} - {value[1]}\n    \t\t</Typography>\n            <Slider\n                id='range-slider'\n                value={value}\n                onChange={handleChange}\n                onChangeCommitted={handleChangeCommit}\n                valueLabelDisplay='off'\n                aria-labelledby='range-slider'\n                min={props.range.min}\n                max={props.range.max}\n                track={props.track}\n                marks={true}\n                step={props.step}\n            />\n\t\t</div>\n\t);\n};\n\n","import React, { useState } from 'react';\n\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\ntype YearPublishedFilterProps = {\n\tyears: number[];\n\tcurrentFilter?: number[];\n\tsetFilter: (count: number[]) => void;\n};\n\nexport default function YearPublishedFilter(props: YearPublishedFilterProps) {\n\tconst [value, setValue] = useState(() => {\n\t\tif (props.currentFilter) {\n    \t\tconst minYear = props.currentFilter[0];\n    \t\tconst maxYear = props.currentFilter[1];\n        \treturn [props.years.indexOf(minYear), props.years.indexOf(maxYear)];\n        } else {\n            return [0, props.years.length - 1];\n        }\n    });\n\n\tconst handleChange = (event: any, newValue: number | number[]) => {\n        setValue(newValue as number[]);\n\t};\n\n\tconst handleChangeCommit = (event: any, filterValue: number | number[]) => {\n    \tconst sliderValues = filterValue as number[];\n    \tconst filterYears = [props.years[sliderValues[0]], props.years[sliderValues[1]]];\n\t\tprops.setFilter(filterYears);\n\t};\n    \n\treturn (\n\t\t<div className='year-published-slider range-slider-filter'>\n\t\t\t<Typography variant='h6' className='filter-list-item-title' gutterBottom>\n\t\t\t\tYear Published\n\t\t\t</Typography>\n\t\t\t<Typography variant='subtitle1'>\n\t\t\t\t{props.years[value[0]]} - {props.years[value[1]]}\n    \t\t</Typography>\n            <Slider\n                id='range-slider'\n                value={value}\n                onChange={handleChange}\n                onChangeCommitted={handleChangeCommit}\n                valueLabelDisplay='off'\n                aria-labelledby='range-slider'\n                min={0}\n                max={props.years.length - 1}\n                marks={true}\n            />\n\t\t</div>\n\t);\n};\n\n\n","import React, { useState } from 'react';\n\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Collapse from '@material-ui/core/Collapse';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\ntype CheckListFilterProps = {\n\ttitle: string;\n\tclasses: string;\n\toptions: Record<string, number>;\n\tcurrentFilter: string[];\n\tsetFilter: (filters: string[]) => void;\n};\n\nexport default function CheckListFilter(props: CheckListFilterProps) {\n    const [seeAll, setSeeAll] = useState(false);\n\n    const sortedOptions = Object.keys(props.options).sort((optionOne, optionTwo) => {\n\t\treturn props.options[optionTwo] - props.options[optionOne];\n    });\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    \tconst category = e.target!.value;\n    \tif (props.currentFilter.includes(category)) {\n\t\t\tprops.setFilter(props.currentFilter.filter(filterCat => filterCat !== category));\n    \t} else {\n        \tprops.setFilter([...props.currentFilter, category]);\n    \t}\n\t};\n\n    const renderOptionCheckbox = (option: string) => {\n\t\treturn (\n\t\t\t<div className='check-list-option' key={option.toLocaleLowerCase()}>\n    \t\t\t<FormControlLabel\n    \t\t\t\tcontrol={\n               \t\t\t <Checkbox\n               \t\t\t \tcolor='default'\n               \t\t\t \tchecked={props.currentFilter.includes(option)}\n               \t\t\t \tonChange={handleChange}\n               \t\t\t \tvalue={option}\n               \t\t\t />\n    \t\t\t\t}\n    \t\t\t\tlabel={option}\n    \t\t\t/>\n    \t\t\t<Chip label={`${props.options[option]}`} variant='outlined' />\n    \t\t</div>\n\t\t);\n    };\n    \n\treturn (\n        <div className={props.classes}>\n        \t<Typography variant='h6' className='filter-list-item-title' gutterBottom>\n        \t\t{props.title}\n            </Typography>\n            <div className='check-list-container'>\n                {sortedOptions.slice(0,10).map(renderOptionCheckbox)}\n                <Collapse in={seeAll} unmountOnExit>\n\t\t\t\t\t{sortedOptions.slice(10).map(renderOptionCheckbox)}\n                </Collapse>\n                <Button variant='outlined' onClick={() => setSeeAll(!seeAll)}>\n\t\t\t\t\t{seeAll ? 'Hide' : 'See All'}\n                </Button>\n            </div>\n        </div>\n\t);\n};\n","import React from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport RangeSliderFilter from './RangeSliderFilter';\nimport YearPublishedFilter from './YearPublishedFilter';\nimport CheckListFilter from './CheckListFilter';\n\nimport BoardGameActions from '../../../BoardGameActions';\n\ntype FilterListProps = {\n\tcollection: Array<Record<string, any>>;\n\tfilters: Record<string, any>;\n\tsetFilters: (filters: Record<string, any>) => void;\n\tcloseDrawer: () => void;\n};\n\nexport default function FilterList(props: FilterListProps) {\n\tconst collection = props.collection;\n\tconst filters = props.filters;\n\tconst setFilters = props.setFilters;\n\n    const gameData = BoardGameActions.getFilterData(collection);\n\n\tconst rangeFilters = [\n\t\t{\n\t\t\tfilter: 'playercount',\n\t\t\ttitle: 'Player Count',\n\t\t\ttrack: 'normal',\n\t\t\tstep: 1,\n\t\t\trange: {min: gameData.minPlayerCount, max: gameData.maxPlayerCount}\n    \t},\n    \t{\n\t\t\tfilter: 'playtime',\n\t\t\ttitle: 'Play Time',\n\t\t\ttrack: 'normal',\n\t\t\tstep: 5,\n\t\t\trange: {min: gameData.minPlayTime, max: gameData.maxPlayTime}\n    \t}\n    ];\n    const checklistFilters = ['category', 'mechanic', 'family', 'designer', 'artist', 'publisher'];\n\n    console.log(gameData);\n\n    return (\n\t\t<List disablePadding={true}>\n\t\t\t<ListSubheader>\n\t\t\t\t<Typography variant='h5'>Filters</Typography>\n\t\t\t\t<Button onClick={props.closeDrawer} className='close-btn'>Close</Button>\n\t\t\t</ListSubheader>\n\t\t\t{rangeFilters.map(rangeFilter => {\n\t\t\t\treturn (\n\t\t\t\t\t<ListItem key={rangeFilter.filter}>\n    \t\t\t\t\t<RangeSliderFilter\n    \t\t\t\t\t\ttitle={rangeFilter.title}\n    \t\t\t\t\t\tclasses={`${rangeFilter.filter}-slider`}\n    \t\t\t\t\t\ttrack={rangeFilter.track as (false | 'normal' | 'inverted')}\n    \t\t\t\t\t\tstep={rangeFilter.step}\n    \t\t\t\t\t\trange={rangeFilter.range}\n    \t\t\t\t\t\tcurrentFilter={filters[rangeFilter.filter] ?\n        \t\t\t\t\t\t[filters[rangeFilter.filter].min, filters[rangeFilter.filter].max] :\n        \t\t\t\t\t\tundefined\n        \t\t\t\t\t}\n        \t\t\t\t\tsetFilter={results => {\n    \t\t\t\t\t\t\tconst newFilter: Record<string, any> = {};\n    \t\t\t\t\t\t\tnewFilter[rangeFilter.filter] = {\n    \t\t\t\t\t\t\t\tmin: results[0],\n    \t\t\t\t\t\t\t\tmax: results[1]\n    \t\t\t\t\t\t\t};\n    \t\t\t\t\t\t\tsetFilters({...filters, ...newFilter});\n        \t\t\t\t\t}}\n        \t\t\t\t/>\n        \t\t\t</ListItem>\n\t\t\t\t);\n\t\t\t})}\n            <ListItem>\n\t\t\t\t<YearPublishedFilter\n\t\t\t\t\tyears={gameData.years}\n\t\t\t\t\tcurrentFilter={filters['yearpublished'] ?\n\t\t\t\t\t\t[filters['yearpublished'].min, filters['yearpublished'].max] :\n\t\t\t\t\t\tundefined\n\t\t\t\t\t}\n                    setFilter={(years) => {\n\t\t\t\t\t\tconst yearPublishedFilter = {'yearpublished': {\n    \t\t\t\t\t\tmin: years[0],\n    \t\t\t\t\t\tmax: years[1]\n\t\t\t\t\t\t}};\n\t\t\t\t\t\tsetFilters({...filters, ...yearPublishedFilter});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</ListItem>\n\t\t\t{checklistFilters.map(filter => {\n                const filterName = `boardgame${filter}`;\n\t\t\t\treturn (\n\t\t\t\t\t<ListItem key={filterName}>\n\t\t\t\t\t\t<CheckListFilter\n\t\t\t\t\t\t\ttitle={filter}\n\t\t\t\t\t\t\tclasses={`${filter}-checklist`}\n\t\t\t\t\t\t\toptions={gameData[filter]}\n\t\t\t\t\t\t\tcurrentFilter={filters[filterName] || []}\n\t\t\t\t\t\t\tsetFilter={(results) => {\n    \t\t\t\t\t\t\tlet resultsObject: Record<string, any> = {};\n    \t\t\t\t\t\t\tresultsObject[filterName] = results;\n\t\t\t\t\t\t\t\tsetFilters({...filters, ...resultsObject});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ListItem>\n\t\t\t\t);\n\t\t\t})}\n\t\t</List>\n\t);\n};\n","import React, { useState, useEffect } from 'react';\n\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Drawer from '@material-ui/core/Drawer';\n\nimport FilterList from './filters/FilterList';\n\nimport './FilterDrawer.css';\n\ntype FilterDrawerProps = {\n    collection: Array<Record<string, any>>;\n\tsetCollectionFilter: (test: Record<string, any>) => void;\n};\n\nexport default function FilterDrawer(props: FilterDrawerProps) {\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    const [filterNumber, setFilterNumber] = useState(0);\n    const [filters, setFilters] = useState({} as Record<string, any>);\n\n    const updateCollectionFilters = props.setCollectionFilter;\n\n    useEffect(() => {\n        setFilterNumber(Object.keys(filters).length);\n\t\tupdateCollectionFilters(filters);\n    }, [filters, updateCollectionFilters]);\n\n    const disableFiltersButton = (\n    \t(props.collection.length < 1) ||\n    \tprops.collection[0].hasOwnProperty('error')\n    );\n\n\treturn (\n\t\t<div className='filter-drawer-btn-wrapper toolbar-button-container'>\n        \t<Button\n        \t\tdisabled={disableFiltersButton}\n        \t\tonClick={() => setDrawerOpen(true)}\n        \t\tclassName='search-bar-input'\n        \t\tvariant='outlined'>\n        \t\tFilters\n        \t\t<Chip variant='outlined' size='small' label={filterNumber} />\n        \t</Button>\n        \t<Drawer\n                className='filter-drawer-wrapper'\n        \t\topen={drawerOpen}\n        \t\tonClose={() => setDrawerOpen(false)}\n        \t\tanchor='bottom'\n        \t>\n    \t\t\t<FilterList\n    \t\t\t\tcollection={props.collection}\n    \t\t\t\tfilters={filters}\n    \t\t\t\tsetFilters={setFilters}\n    \t\t\t\tcloseDrawer={() => setDrawerOpen(false)}\n    \t\t\t/>\n        \t</Drawer>\n    \t</div>\n\t);\n};\n","type CollectionDataObject = {\n\tid: string | null;\n\tname: string | null;\n\tdescription: string | null;\n\timage: string | null;\n\tthumbnail: string | null;\n\tyearpublished: string | null;\n\tminplayers: string | null;\n\tmaxplayers: string | null;\n\tplayingtime: string | null;\n\tminplaytime: string | null;\n\tmaxplaytime: string | null;\n\tboardgamecategory: (string | null)[];\n\tboardgamemechanic: (string | null)[];\n\tboardgamefamily: (string | null)[];\n\tboardgamedesigner: (string | null)[];\n\tboardgameartist: (string | null)[];\n\tboardgamepublisher: (string | null)[];\n};\n\nconst getTagValue = (elem: Element, name: string) => {\n\treturn elem.getElementsByTagName(name)[0].getAttribute('value');\n};\n\nconst getLinkValue = (elem: Element, name: string) => {\n\treturn Array.from(elem.querySelectorAll(`link[type=${name}]`)).map(link => link.getAttribute('value'));\n};\n\nconst getDataObjectFromThing = (thing: Element): CollectionDataObject => {\n    return {\n\t\tid: thing.getAttribute('id'),\n\t\tname: thing.querySelector('name[type=\"primary\"]')!.getAttribute('value'),\n\t\tdescription: thing.getElementsByTagName('description')[0].innerHTML.replace(/&amp;#10;/g, '\\n'),\n\t\timage: thing.getElementsByTagName('image')[0].innerHTML,\n        thumbnail: thing.getElementsByTagName('thumbnail')[0].innerHTML,\n        yearpublished: getTagValue(thing, 'yearpublished'),\n        minplayers: getTagValue(thing, 'minplayers'),\n        maxplayers: getTagValue(thing, 'maxplayers'),\n        playingtime: getTagValue(thing, 'playingtime'),\n        minplaytime: getTagValue(thing, 'minplaytime'),\n        maxplaytime: getTagValue(thing, 'maxplaytime'),\n        boardgamecategory: getLinkValue(thing, 'boardgamecategory'),\n        boardgamemechanic: getLinkValue(thing, 'boardgamemechanic'),\n        boardgamefamily: getLinkValue(thing, 'boardgamefamily'),\n        boardgamedesigner: getLinkValue(thing, 'boardgamedesigner'),\n        boardgameartist: getLinkValue(thing, 'boardgameartist'),\n        boardgamepublisher: getLinkValue(thing, 'boardgamepublisher')\n\t};\n};\n\nconst BoardGameGeekAPI = {\n    getCollectionForUser: (username: string) => {\n        return fetch(`https://www.boardgamegeek.com/xmlapi2/collection?username=${username}&excludesubtype=boardgameexpansion&own=1`)\n            .then((response: Response) => response.text())\n            .then((text: string) => {\n                let domParser = new DOMParser();\n                return domParser.parseFromString(text, \"text/xml\");\n            })\n            .then((xmlCollectionResponse) => {\n                return Promise.all(Array.from(xmlCollectionResponse.getElementsByTagName('item')).map(collectionItem => {\n                    const id = collectionItem.getAttribute('objectid')!;\n                    return BoardGameGeekAPI.getBoardGame(id);\n                }));\n            })\n            .catch((error) => {\n\t\t\t\tconsole.log(`Error: ${error}`);\n\t\t\t\treturn [{error: error}];\n            });\n    },\n\n    getBoardGame: async (id: string) => {\n\t\treturn fetch(`https://www.boardgamegeek.com/xmlapi2/thing?id=${id}&type=boardgame`)\n\t\t\t.then((response: Response) => response.text())\n\t\t\t.then((text: string) => {\n                let domParser = new DOMParser();\n            \treturn domParser.parseFromString(text, \"text/xml\").getElementsByTagName('item')[0];\n\t\t\t})\n\t\t\t.then((xmlThingResponse) => {\n                return getDataObjectFromThing(xmlThingResponse);\n\t\t\t});\n\t}\n};\n\nexport default BoardGameGeekAPI;\n","import React, { useState, useEffect } from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport SortSelect from './searchbar/SortSelect';\nimport SearchField from './searchbar/SearchField';\nimport FilterDrawer from './searchbar/FilterDrawer';\n\nimport BoardGameGeekAPI from '../BoardGameGeekAPI';\n\nimport './SearchBar.css';\n\ntype SearchBarProps = {\n    collection: Array<Record<string, any>>;\n\tsetCollection: (collection: Array<Record<string, any>>) => void;\n\tcollectionSort: string;\n\tsetCollectionSort: (collectionSort: string) => void;\n\tsetCollectionFilters: (collectionFilters: Record<string, any>) => void;\n};\n\nexport default function SearchBar(props: SearchBarProps) {\n    let [username, setUsername] = useState('');\n\n    const updateCollection = props.setCollection;\n\n    useEffect(() => {\n        if (username !== '') {\n    \t\tBoardGameGeekAPI.getCollectionForUser(username)\n    \t\t\t.then((userCollection: any[]) => {\n    \t\t\t\tupdateCollection(userCollection);\n    \t\t\t});\n        }\n\t}, [username, updateCollection]);\n\n\treturn (\n\t\t<AppBar className='search-bar' position='sticky'>\n\t\t\t<Toolbar disableGutters={true}>\n                <SearchField setUsername={setUsername} />\n                <SortSelect currentSort={props.collectionSort} selectSort={props.setCollectionSort} />\n                <FilterDrawer\n\t\t\t\t\tcollection={props.collection}\n                \tsetCollectionFilter={props.setCollectionFilters}\n                />\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t);\n}\n","import React from 'react';\n\ntype DisplayModeProps = {\n\tdisplayMode: string;\n\tgames: Array<Record<string, any>>;\n};\n\nexport default function DisplayMode(props: DisplayModeProps) {\n\treturn (\n\t\t<div className='display'>\n\t\t\t{props.games.map(game => <img src={game.image} alt={game.name} />)}\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { useState, useEffect } from 'react';\n\nimport BoardGameGallery from './components/BoardGameGallery';\nimport SearchBar from './components/SearchBar';\nimport DisplayMode from './components/DisplayMode';\n\nimport './App.css';\n\nexport default function App() {\n    const [collection, setCollection] = useState(Array<Record<string, any>>());\n    const [collectionSort, setCollectionSort] = useState('name');\n    const [collectionFilters, setCollectionFilters] = useState({});\n    const [displayMode, setDisplayMode] = useState('');\n\n    useEffect(() => {\n        const urlParams = new URLSearchParams(window.location.search);\n\n        if (urlParams.has('display')) {\n\t\t\tsetDisplayMode(urlParams.get('display') as string);\n        }\n    }, []);\n\n    if (displayMode && collection.length) {\n\t\treturn (\n\t\t\t<DisplayMode displayMode={displayMode} games={collection} />\n\t\t);\n    }\n\n\tlet gallery;\n\n    if (collection.length && collection[0].hasOwnProperty('error')) {\n        gallery = (\n\t\t\t<div className='bgg-error'>\n\t\t\t\t<div>\n        \t\t\tSorry, something has gone wrong.<br/>\n    \t\t\t\tTry again in a few minutes.\n    \t\t\t</div>\n\t\t\t</div>\n        );\n    } else {\n\t\tgallery = (\n\t\t\t<BoardGameGallery\n\t\t\t\tgames={collection}\n\t\t\t\tsort={collectionSort}\n\t\t\t\tfilters={collectionFilters}\n\t\t\t/>\n\t\t);\n    }\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<SearchBar\n\t\t\t\tcollection={collection}\n\t\t\t\tsetCollection={setCollection}\n\t\t\t\tcollectionSort={collectionSort}\n\t\t\t\tsetCollectionSort={setCollectionSort}\n\t\t\t\tsetCollectionFilters={setCollectionFilters}\n\t\t\t/>\n          \t{gallery}\n    \t</div>\n  \t);\n}\n\n"],"sourceRoot":""}