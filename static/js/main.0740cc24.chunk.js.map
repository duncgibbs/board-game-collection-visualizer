{"version":3,"sources":["BoardGameGeekAPI.ts","App.tsx","index.tsx"],"names":["getTagValue","elem","name","getElementsByTagName","getAttribute","getLinkValue","Array","from","querySelectorAll","map","link","BoardGameGeekAPI","getCollectionForUser","username","fetch","then","response","text","DOMParser","parseFromString","xmlCollectionResponse","Promise","all","collectionItem","id","getBoardGame","a","xmlThingResponse","thing","querySelector","image","innerHTML","thumbnail","yearpublished","minplayers","maxplayers","playingtime","minplaytime","maxplaytime","boardgamecategory","boardgamemechanic","boardgamefamily","boardgamedesigner","boardgameartist","boardgamepublisher","App","useState","collection","setCollection","setUsername","className","TextField","label","variant","onKeyUp","e","charCode","key","userCollection","onChange","target","value","GridList","cols","game","GridListTile","src","alt","GridListTileBar","title","ReactDOM","render","document","getElementById"],"mappings":"6VAmBMA,EAAc,SAACC,EAAeC,GACnC,OAAOD,EAAKE,qBAAqBD,GAAM,GAAGE,aAAa,UAGlDC,EAAe,SAACJ,EAAeC,GACpC,OAAOI,MAAMC,KAAKN,EAAKO,iBAAL,oBAAmCN,EAAnC,OAA6CO,KAAI,SAAAC,GAAI,OAAIA,EAAKN,aAAa,aAwB1FO,EAAmB,CACnBC,qBAAsB,SAACC,GACnB,OAAOC,MAAM,6DAAD,OAA8DD,EAA9D,6CACPE,MAAK,SAACC,GAAD,OAAwBA,EAASC,UACtCF,MAAK,SAACE,GAEH,OADgB,IAAIC,WACHC,gBAAgBF,EAAM,eAE1CF,MAAK,SAACK,GACH,OAAOC,QAAQC,IAAIhB,MAAMC,KAAKa,EAAsBjB,qBAAqB,SAASM,KAAI,SAAAc,GAClF,IAAMC,EAAKD,EAAenB,aAAa,YACvC,OAAOO,EAAiBc,aAAaD,WAKrDC,aAAa,WAAD,4BAAE,WAAOD,GAAP,SAAAE,EAAA,+EACTZ,MAAM,kDAAD,OAAmDU,EAAnD,oBACVT,MAAK,SAACC,GAAD,OAAwBA,EAASC,UACtCF,MAAK,SAACE,GAEG,OADmB,IAAIC,WACNC,gBAAgBF,EAAM,YAAYd,qBAAqB,QAAQ,MAEzFY,MAAK,SAACY,GACM,MA5CL,CACTH,IAF8BI,EA6CcD,GA3ClCvB,aAAa,MACvBF,KAAM0B,EAAMC,cAAc,wBAAyBzB,aAAa,SAChE0B,MAAOF,EAAMzB,qBAAqB,SAAS,GAAG4B,UACxCC,UAAWJ,EAAMzB,qBAAqB,aAAa,GAAG4B,UACtDE,cAAejC,EAAY4B,EAAO,iBAClCM,WAAYlC,EAAY4B,EAAO,cAC/BO,WAAYnC,EAAY4B,EAAO,cAC/BQ,YAAapC,EAAY4B,EAAO,eAChCS,YAAarC,EAAY4B,EAAO,eAChCU,YAAatC,EAAY4B,EAAO,eAChCW,kBAAmBlC,EAAauB,EAAO,qBACvCY,kBAAmBnC,EAAauB,EAAO,qBACvCa,gBAAiBpC,EAAauB,EAAO,mBACrCc,kBAAmBrC,EAAauB,EAAO,qBACvCe,gBAAiBtC,EAAauB,EAAO,mBACrCgB,mBAAoBvC,EAAauB,EAAO,uBAjBjB,IAACA,MAqCd,2CAAF,mDAAC,IAaFjB,I,MCvBAkC,MA9Cf,WAAgB,IAAD,EACuBC,mBAASxC,SADhC,mBACNyC,EADM,KACMC,EADN,OAEqBF,mBAAS,IAF9B,mBAEJjC,EAFI,KAEMoC,EAFN,KA0Bd,OACC,yBAAKC,UAAU,OACd,yBAAKA,UAAU,eACN,kBAACC,EAAA,EAAD,CACC3B,GAAG,sBACH4B,MAAM,WACNC,QAAQ,WACRC,QAtBQ,SAACC,GACD,KAAfA,EAAEC,UAA6B,UAAVD,EAAEE,KAP3B9C,EAAiBC,qBAAqBC,GACpCE,MAAK,SAAC2C,GACNV,EAAcU,OA2BLC,SAAU,SAAAJ,GAAC,OAAIN,EAAYM,EAAEK,OAAOC,WAGtC,yBAAKX,UAAU,sBACd,kBAACY,EAAA,EAAD,CAAUC,KAAM,GACtBhB,EAAWtC,KAtBQ,SAACuD,GACxB,OACC,kBAACC,EAAA,EAAD,CAAcR,IAAKO,EAAKxC,IACvB,yBAAK0C,IAAKF,EAAKlC,MAAOqC,IAAKH,EAAK9D,OAChC,kBAACkE,EAAA,EAAD,CAAiBC,MAAOL,EAAK9D,eCxBjCoE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0740cc24.chunk.js","sourcesContent":["type CollectionDataObject = {\n\tid: string | null;\n\tname: string | null;\n\timage: string | null;\n\tthumbnail: string | null;\n\tyearpublished: string | null;\n\tminplayers: string | null;\n\tmaxplayers: string | null;\n\tplayingtime: string | null;\n\tminplaytime: string | null;\n\tmaxplaytime: string | null;\n\tboardgamecategory: (string | null)[];\n\tboardgamemechanic: (string | null)[];\n\tboardgamefamily: (string | null)[];\n\tboardgamedesigner: (string | null)[];\n\tboardgameartist: (string | null)[];\n\tboardgamepublisher: (string | null)[];\n};\n\nconst getTagValue = (elem: Element, name: string) => {\n\treturn elem.getElementsByTagName(name)[0].getAttribute('value');\n};\n\nconst getLinkValue = (elem: Element, name: string) => {\n\treturn Array.from(elem.querySelectorAll(`link[type=${name}]`)).map(link => link.getAttribute('value'));\n};\n\nconst getDataObjectFromThing = (thing: Element): CollectionDataObject => {\n    return {\n\t\tid: thing.getAttribute('id'),\n\t\tname: thing.querySelector('name[type=\"primary\"]')!.getAttribute('value'),\n\t\timage: thing.getElementsByTagName('image')[0].innerHTML,\n        thumbnail: thing.getElementsByTagName('thumbnail')[0].innerHTML,\n        yearpublished: getTagValue(thing, 'yearpublished'),\n        minplayers: getTagValue(thing, 'minplayers'),\n        maxplayers: getTagValue(thing, 'maxplayers'),\n        playingtime: getTagValue(thing, 'playingtime'),\n        minplaytime: getTagValue(thing, 'minplaytime'),\n        maxplaytime: getTagValue(thing, 'maxplaytime'),\n        boardgamecategory: getLinkValue(thing, 'boardgamecategory'),\n        boardgamemechanic: getLinkValue(thing, 'boardgamemechanic'),\n        boardgamefamily: getLinkValue(thing, 'boardgamefamily'),\n        boardgamedesigner: getLinkValue(thing, 'boardgamedesigner'),\n        boardgameartist: getLinkValue(thing, 'boardgameartist'),\n        boardgamepublisher: getLinkValue(thing, 'boardgamepublisher')\n\t};\n};\n\nlet BoardGameGeekAPI = {\n    getCollectionForUser: (username: string) => {\n        return fetch(`https://www.boardgamegeek.com/xmlapi2/collection?username=${username}&excludesubtype=boardgameexpansion&own=1`)\n            .then((response: Response) => response.text())\n            .then((text: string) => {\n                let domParser = new DOMParser();\n                return domParser.parseFromString(text, \"text/xml\");\n            })\n            .then((xmlCollectionResponse) => {\n                return Promise.all(Array.from(xmlCollectionResponse.getElementsByTagName('item')).map(collectionItem => {\n                    const id = collectionItem.getAttribute('objectid')!;\n                    return BoardGameGeekAPI.getBoardGame(id);\n                }));\n            });\n    },\n\n    getBoardGame: async (id: string) => {\n\t\treturn fetch(`https://www.boardgamegeek.com/xmlapi2/thing?id=${id}&type=boardgame`)\n\t\t\t.then((response: Response) => response.text())\n\t\t\t.then((text: string) => {\n                let domParser = new DOMParser();\n            \treturn domParser.parseFromString(text, \"text/xml\").getElementsByTagName('item')[0];\n\t\t\t})\n\t\t\t.then((xmlThingResponse) => {\n                return getDataObjectFromThing(xmlThingResponse);\n\t\t\t});\n\t}\n};\n\nexport default BoardGameGeekAPI;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport BoardGameGeekAPI from './BoardGameGeekAPI';\nimport './App.css';\n\nfunction App() {\n    let [collection, setCollection] = useState(Array<Element>());\n    const [username, setUsername] = useState('');\n\n    const getBGGCollection = () => {\n\t\tBoardGameGeekAPI.getCollectionForUser(username)\n\t\t\t.then((userCollection: any[]) => {\n\t\t\t\tsetCollection(userCollection);\n\t\t\t});\n\t}\n\n\tconst handleKeyUp = (e: React.KeyboardEvent<HTMLDivElement>) => {\n\t\tif (e.charCode === 13 || e.key === 'Enter') {\n\t\t\tgetBGGCollection();\n\t\t}\n\t};\n\n\tconst renderBoardGame = (game: Record<string, any>) => {\n\t\treturn (\n\t\t\t<GridListTile key={game.id}>\n\t\t\t\t<img src={game.image} alt={game.name} />\n\t\t\t\t<GridListTileBar title={game.name} />\n\t\t\t</GridListTile>\n\t\t);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"user-search\">\n          \t\t<TextField\n          \t\t\tid=\"collection-username\"\n          \t\t\tlabel=\"Username\"\n          \t\t\tvariant=\"outlined\"\n          \t\t\tonKeyUp={handleKeyUp}\n          \t\t\tonChange={e => setUsername(e.target.value)}\n          \t\t/>\n          \t</div>\n          \t<div className=\"board-game-gallery\">\n          \t\t<GridList cols={4}>\n\t\t\t\t\t{collection.map(renderBoardGame)}\n          \t\t</GridList>\n          \t</div>\n    \t</div>\n  \t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}