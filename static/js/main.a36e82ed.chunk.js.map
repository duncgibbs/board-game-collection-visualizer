{"version":3,"sources":["components/BoardGameGallery.tsx","BoardGameGeekAPI.ts","components/SearchBar.tsx","App.tsx","index.tsx"],"names":["BoardGameGallery","props","className","GridList","cols","cellHeight","games","ascendingSorts","sort","gameOne","gameTwo","includes","localeCompare","sortGames","map","game","title","name","icon","faUser","minplayers","maxplayers","faClock","minplaytime","maxplaytime","GridListTile","key","id","src","image","alt","GridListTileBar","getTagValue","elem","getElementsByTagName","getAttribute","getLinkValue","Array","from","querySelectorAll","link","BoardGameGeekAPI","getCollectionForUser","username","fetch","then","response","text","DOMParser","parseFromString","xmlCollectionResponse","Promise","all","collectionItem","getBoardGame","a","xmlThingResponse","thing","querySelector","description","innerHTML","thumbnail","yearpublished","playingtime","boardgamecategory","boardgamemechanic","boardgamefamily","boardgamedesigner","boardgameartist","boardgamepublisher","SearchBar","URLSearchParams","window","location","search","useState","setUsername","getBGGCollection","userCollection","setCollection","inputLabel","React","useRef","labelWidth","setLabelWidth","useEffect","current","offsetWidth","TextField","label","variant","onKeyUp","e","charCode","onChange","target","value","FormControl","InputLabel","ref","htmlFor","Select","native","collectionSort","setCollectionSort","inputProps","display","sortable","App","collection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a36e82ed.chunk.js","sourcesContent":["import React from 'react';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faClock } from '@fortawesome/free-solid-svg-icons';\n\nimport './BoardGameGallery.css';\n\ntype BoardGameGalleryProps = {\n\tgames: Array<Record<string, any>>;\n\tsort: string;\n};\n\nexport default function BoardGameGallery(props: BoardGameGalleryProps) {\n    const sortGames = (games: Array<Record<string, any>>) => {\n\t\tconst ascendingSorts = ['maxplayers'];\n        games.sort((gameOne, gameTwo) => {\n            if (ascendingSorts.includes(props.sort)) {\n                return gameTwo[props.sort] - gameOne[props.sort];\n            } else if (props.sort === 'name') {\n\t\t\t\treturn gameOne[props.sort].localeCompare(gameTwo[props.sort]);\n            } else {\n            \treturn gameOne[props.sort] - gameTwo[props.sort];\n            }\n    \t});\n\n    \treturn games;\n    };\n    \n    const renderBoardGame = (game: Record<string, any>) => {\n        const title = (\n\t\t\t<div className=\"game-info-bar\">\n\t\t\t\t<div className=\"title\">{game.name}</div>\n\t\t\t\t<div className=\"players\">\n\t\t\t\t\t<FontAwesomeIcon icon={faUser} />\n\t\t\t\t\t{(game.minplayers === game.maxplayers) ? (\n    \t\t\t\t\t`${game.minplayers}`\n    \t\t\t\t) : (\n    \t\t\t\t\t`${game.minplayers}-${game.maxplayers}`\n    \t\t\t\t)}\n    \t\t\t</div>\n    \t\t\t<div className=\"time\">\n\t\t\t\t\t<FontAwesomeIcon icon={faClock} />\n\t\t\t\t\t{(game.minplaytime === game.maxplaytime) ? (\n    \t\t\t\t\t`${game.minplaytime}`\n    \t\t\t\t) : (\n    \t\t\t\t\t`${game.minplaytime}-${game.maxplaytime}`\n    \t\t\t\t)}\n    \t\t\t</div>\n\t\t\t</div>\n        );\n\t\treturn (\n    \t\t\t<GridListTile key={game.id}>\n    \t\t\t\t<img src={game.image} alt={game.name} />\n    \t\t\t\t<GridListTileBar title={title} />\n    \t\t\t</GridListTile>\n\t\t);\n\t};\n\n\treturn (\n        <div className=\"board-game-gallery\">\n            <GridList cols={4} cellHeight={250}>\n        \t\t{sortGames(props.games).map(renderBoardGame)}\n      \t\t</GridList>\n      \t</div>\n\t);\n}\n\n","type CollectionDataObject = {\n\tid: string | null;\n\tname: string | null;\n\tdescription: string | null;\n\timage: string | null;\n\tthumbnail: string | null;\n\tyearpublished: string | null;\n\tminplayers: string | null;\n\tmaxplayers: string | null;\n\tplayingtime: string | null;\n\tminplaytime: string | null;\n\tmaxplaytime: string | null;\n\tboardgamecategory: (string | null)[];\n\tboardgamemechanic: (string | null)[];\n\tboardgamefamily: (string | null)[];\n\tboardgamedesigner: (string | null)[];\n\tboardgameartist: (string | null)[];\n\tboardgamepublisher: (string | null)[];\n};\n\nconst getTagValue = (elem: Element, name: string) => {\n\treturn elem.getElementsByTagName(name)[0].getAttribute('value');\n};\n\nconst getLinkValue = (elem: Element, name: string) => {\n\treturn Array.from(elem.querySelectorAll(`link[type=${name}]`)).map(link => link.getAttribute('value'));\n};\n\nconst getDataObjectFromThing = (thing: Element): CollectionDataObject => {\n    return {\n\t\tid: thing.getAttribute('id'),\n\t\tname: thing.querySelector('name[type=\"primary\"]')!.getAttribute('value'),\n\t\tdescription: thing.getElementsByTagName('description')[0].innerHTML,\n\t\timage: thing.getElementsByTagName('image')[0].innerHTML,\n        thumbnail: thing.getElementsByTagName('thumbnail')[0].innerHTML,\n        yearpublished: getTagValue(thing, 'yearpublished'),\n        minplayers: getTagValue(thing, 'minplayers'),\n        maxplayers: getTagValue(thing, 'maxplayers'),\n        playingtime: getTagValue(thing, 'playingtime'),\n        minplaytime: getTagValue(thing, 'minplaytime'),\n        maxplaytime: getTagValue(thing, 'maxplaytime'),\n        boardgamecategory: getLinkValue(thing, 'boardgamecategory'),\n        boardgamemechanic: getLinkValue(thing, 'boardgamemechanic'),\n        boardgamefamily: getLinkValue(thing, 'boardgamefamily'),\n        boardgamedesigner: getLinkValue(thing, 'boardgamedesigner'),\n        boardgameartist: getLinkValue(thing, 'boardgameartist'),\n        boardgamepublisher: getLinkValue(thing, 'boardgamepublisher')\n\t};\n};\n\nconst BoardGameGeekAPI = {\n    getCollectionForUser: (username: string) => {\n        return fetch(`https://www.boardgamegeek.com/xmlapi2/collection?username=${username}&excludesubtype=boardgameexpansion&own=1`)\n            .then((response: Response) => response.text())\n            .then((text: string) => {\n                let domParser = new DOMParser();\n                return domParser.parseFromString(text, \"text/xml\");\n            })\n            .then((xmlCollectionResponse) => {\n                return Promise.all(Array.from(xmlCollectionResponse.getElementsByTagName('item')).map(collectionItem => {\n                    const id = collectionItem.getAttribute('objectid')!;\n                    return BoardGameGeekAPI.getBoardGame(id);\n                }));\n            });\n    },\n\n    getBoardGame: async (id: string) => {\n\t\treturn fetch(`https://www.boardgamegeek.com/xmlapi2/thing?id=${id}&type=boardgame`)\n\t\t\t.then((response: Response) => response.text())\n\t\t\t.then((text: string) => {\n                let domParser = new DOMParser();\n            \treturn domParser.parseFromString(text, \"text/xml\").getElementsByTagName('item')[0];\n\t\t\t})\n\t\t\t.then((xmlThingResponse) => {\n                return getDataObjectFromThing(xmlThingResponse);\n\t\t\t});\n\t}\n};\n\nexport default BoardGameGeekAPI;\n","import React, { useState } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\n\nimport BoardGameGeekAPI from '../BoardGameGeekAPI';\n\ntype SearchBarProps = {\n    collection: Array<Record<string, any>>;\n\tsetCollection: (collection: Array<Record<string, any>>) => void;\n\tcollectionSort: string;\n\tsetCollectionSort: (collectionSort: string) => void;\n};\n\nexport default function SearchBar(props: SearchBarProps) {\n    const urlParams = new URLSearchParams(window.location.search);\n\n    let [username, setUsername] = useState('');\n    \n    const sortableColumns = [\n\t\t{name: 'name', display: 'Name'},\n\t\t{name: 'yearpublished', display: 'Year Published'},\n    \t{name: 'minplayers', display: 'Minimum Players'},\n        {name: 'maxplayers', display: 'Maximum Players'},\n        {name: 'playingtime', display: 'Play Time'}\n    ];\n\n    const handleKeyUp = (e: React.KeyboardEvent<HTMLDivElement>) => {\n\t\tif (e.charCode === 13 || e.key === 'Enter') {\n\t\t\tgetBGGCollection();\n\t\t}\n\t};\n\n    const getBGGCollection = () => {\n\t\tBoardGameGeekAPI.getCollectionForUser(username)\n\t\t\t.then((userCollection: any[]) => {\n\t\t\t\tprops.setCollection(userCollection);\n\t\t\t});\n\t};\n\n\tconst inputLabel = React.useRef<HTMLLabelElement>(null);\n\tconst [labelWidth, setLabelWidth] = React.useState(0);\n\tReact.useEffect(() => {\n\t    setLabelWidth(inputLabel.current!.offsetWidth);\n\t}, []);\n\t\n\treturn (\n        <div className=\"search-bar\">\n            <TextField\n                id=\"collection-username\"\n                label=\"Username\"\n                variant=\"outlined\"\n                onKeyUp={handleKeyUp}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => { setUsername(e.target.value); }}\n            />\n            <FormControl variant=\"outlined\">\n                <InputLabel ref={inputLabel} htmlFor=\"outlined-sort-native-simple\">Sort</InputLabel>\n                <Select\n                    native\n                    value={props.collectionSort}\n                    onChange={(e: React.ChangeEvent<{ value: unknown }>) => {\n                        props.setCollectionSort(e.target.value as string);\n                    }}\n                    labelWidth={labelWidth}\n                    inputProps={{\n                        name: 'sort',\n                        id: 'outlined-sort-native-simple',\n                    }}\n                >\n                    {sortableColumns.map(sortable => {\n                        return (\n                        \t<option value={sortable.name} key={sortable.name}>\n                        \t\t{sortable.display}\n                            </option>\n\t\t\t\t\t\t);\n                    })}\n                </Select>\n            </FormControl>\n\t\t</div>\n\t);\n}\n","import React, { useState } from 'react';\nimport BoardGameGallery from './components/BoardGameGallery';\nimport SearchBar from './components/SearchBar';\n\nimport './App.css';\n\nfunction App() {\n    let [collection, setCollection] = useState(Array<Record<string, any>>());\n    let [collectionSort, setCollectionSort] = useState('name');\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SearchBar\n\t\t\t\tcollection={collection}\n\t\t\t\tsetCollection={setCollection}\n\t\t\t\tcollectionSort={collectionSort}\n\t\t\t\tsetCollectionSort={setCollectionSort}\n\t\t\t/>\n          \t<BoardGameGallery games={collection} sort={collectionSort} />\n    \t</div>\n  \t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}