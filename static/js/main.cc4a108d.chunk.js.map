{"version":3,"sources":["components/BoardGameGallery.tsx","components/searchbar/SortSelect.tsx","components/searchbar/SearchField.tsx","BoardGameGeekAPI.ts","components/SearchBar.tsx","App.tsx","index.tsx"],"names":["BoardGameGallery","props","className","GridList","cols","cellHeight","games","ascendingSorts","sort","gameOne","gameTwo","includes","localeCompare","sortGames","map","game","title","name","icon","faUser","minplayers","maxplayers","faClock","minplaytime","maxplaytime","GridListTile","key","id","src","image","alt","GridListTileBar","SortSelect","inputLabel","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","FormControl","variant","InputLabel","ref","htmlFor","Select","native","value","currentSort","onChange","e","selectSort","target","inputProps","display","sortable","SearchField","search","setSearch","updateUsername","setUsername","urlParams","URLSearchParams","window","location","has","get","OutlinedInput","onKeyUp","charCode","endAdornment","InputAdornment","position","IconButton","onClick","edge","faSearch","getTagValue","elem","getElementsByTagName","getAttribute","getLinkValue","Array","from","querySelectorAll","link","BoardGameGeekAPI","getCollectionForUser","username","fetch","then","response","text","DOMParser","parseFromString","xmlCollectionResponse","Promise","all","collectionItem","getBoardGame","catch","error","console","log","a","xmlThingResponse","thing","querySelector","description","innerHTML","thumbnail","yearpublished","playingtime","boardgamecategory","boardgamemechanic","boardgamefamily","boardgamedesigner","boardgameartist","boardgamepublisher","SearchBar","updateCollection","setCollection","userCollection","collectionSort","setCollectionSort","App","gallery","collection","length","hasOwnProperty","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc4a108d.chunk.js","sourcesContent":["import React from 'react';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faClock } from '@fortawesome/free-solid-svg-icons';\n\nimport './BoardGameGallery.css';\n\ntype BoardGameGalleryProps = {\n\tgames: Array<Record<string, any>>;\n\tsort: string;\n};\n\nexport default function BoardGameGallery(props: BoardGameGalleryProps) {\n    const sortGames = (games: Array<Record<string, any>>) => {\n\t\tconst ascendingSorts = ['maxplayers'];\n        games.sort((gameOne, gameTwo) => {\n            if (ascendingSorts.includes(props.sort)) {\n                return gameTwo[props.sort] - gameOne[props.sort];\n            } else if (props.sort === 'name') {\n\t\t\t\treturn gameOne[props.sort].localeCompare(gameTwo[props.sort]);\n            } else {\n            \treturn gameOne[props.sort] - gameTwo[props.sort];\n            }\n    \t});\n\n    \treturn games;\n    };\n    \n    const renderBoardGame = (game: Record<string, any>) => {\n        const title = (\n\t\t\t<div className=\"game-info-bar\">\n\t\t\t\t<div className=\"title\">{game.name}</div>\n\t\t\t\t<div className=\"players\">\n\t\t\t\t\t<FontAwesomeIcon icon={faUser} />\n\t\t\t\t\t{(game.minplayers === game.maxplayers) ? (\n    \t\t\t\t\t`${game.minplayers}`\n    \t\t\t\t) : (\n    \t\t\t\t\t`${game.minplayers}-${game.maxplayers}`\n    \t\t\t\t)}\n    \t\t\t</div>\n    \t\t\t<div className=\"time\">\n\t\t\t\t\t<FontAwesomeIcon icon={faClock} />\n\t\t\t\t\t{(game.minplaytime === game.maxplaytime) ? (\n    \t\t\t\t\t`${game.minplaytime}`\n    \t\t\t\t) : (\n    \t\t\t\t\t`${game.minplaytime}-${game.maxplaytime}`\n    \t\t\t\t)}\n    \t\t\t</div>\n\t\t\t</div>\n        );\n\t\treturn (\n    \t\t\t<GridListTile key={game.id}>\n    \t\t\t\t<img src={game.image} alt={game.name} />\n    \t\t\t\t<GridListTileBar title={title} />\n    \t\t\t</GridListTile>\n\t\t);\n\t};\n\n\treturn (\n        <div className=\"board-game-gallery\">\n            <GridList cols={4} cellHeight={250}>\n        \t\t{sortGames(props.games).map(renderBoardGame)}\n      \t\t</GridList>\n      \t</div>\n\t);\n}\n\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\n\ntype SortSelectProps = {\n    currentSort: string;\n\tselectSort: (sort: string) => void;\n};\n\nexport default function SortSelect(props: SortSelectProps) {\n    const sortableColumns = [\n\t\t{name: 'name', display: 'Name'},\n\t\t{name: 'yearpublished', display: 'Year Published'},\n    \t{name: 'minplayers', display: 'Minimum Players'},\n        {name: 'maxplayers', display: 'Maximum Players'},\n        {name: 'playingtime', display: 'Play Time'}\n    ];\n\n    const inputLabel = useRef<HTMLLabelElement>(null);\n\tconst [labelWidth, setLabelWidth] = useState(0);\n\tuseEffect(() => {\n\t    setLabelWidth(inputLabel.current!.offsetWidth);\n\t}, []);\n\n\treturn (\n        <FormControl variant=\"outlined\">\n            <InputLabel ref={inputLabel} htmlFor=\"outlined-sort-native-simple\">Sort</InputLabel>\n            <Select\n                native\n                value={props.currentSort}\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => {\n                    props.selectSort(e.target.value as string);\n                }}\n                labelWidth={labelWidth}\n                inputProps={{\n                    name: 'sort',\n                    id: 'outlined-sort-native-simple',\n                }}\n                className={'search-bar-input'}\n            >\n                {sortableColumns.map(sortable => {\n                    return (\n                    \t<option value={sortable.name} key={sortable.name}>\n                    \t\t{sortable.display}\n                        </option>\n\t\t\t\t\t);\n                })}\n            </Select>\n        </FormControl>\n\t);\n};\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControl from '@material-ui/core/FormControl';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\ntype SearchFieldProps = {\n\tsetUsername: (username: string) => void;\n};\n\nexport default function SearchField(props: SearchFieldProps) {\n    let [search, setSearch] = useState('');\n\n    let updateUsername = props.setUsername;\n\n    useEffect(() => {\n        const urlParams = new URLSearchParams(window.location.search);\n\n        if (urlParams.has('username') /*&& search !== urlParams.get('username')*/) {\n\t\t\tupdateUsername(urlParams.get('username') as string);\n\t\t\tsetSearch(urlParams.get('username') as string);\n        }\n    }, [updateUsername]);\n\n    const inputLabel = useRef<HTMLLabelElement>(null);\n\tconst [labelWidth, setLabelWidth] = useState(0);\n\tuseEffect(() => {\n\t    setLabelWidth(inputLabel.current!.offsetWidth);\n\t}, []);\n\n    const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tif (e.charCode === 13 || e.key === 'Enter') {\n\t\t\tupdateUsername(search);\n\t\t}\n\t};\n\n    const renderSearchButton = () => {\n        return (\n\t\t\t<InputAdornment position=\"end\">\n                <IconButton\n                \tonClick={() => updateUsername(search)}\n                \tclassName='search-bar-button'\n                \tedge='end'\n                >\n                    <FontAwesomeIcon icon={faSearch} />\n                </IconButton>\n\t\t\t</InputAdornment>\n        );\n    };\n\n\treturn (\n        <FormControl className='search-bar-input' variant='outlined'>\n            <InputLabel ref={inputLabel} htmlFor=\"username-search\">Username</InputLabel>\n\t\t\t<OutlinedInput\n                id='username-search'\n                value={search}\n                onKeyUp={handleKeyUp}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => { setSearch(e.target.value); }}\n                endAdornment={renderSearchButton()}\n                labelWidth={labelWidth}\n            />\n\t\t</FormControl>\n\t);\n};\n","type CollectionDataObject = {\n\tid: string | null;\n\tname: string | null;\n\tdescription: string | null;\n\timage: string | null;\n\tthumbnail: string | null;\n\tyearpublished: string | null;\n\tminplayers: string | null;\n\tmaxplayers: string | null;\n\tplayingtime: string | null;\n\tminplaytime: string | null;\n\tmaxplaytime: string | null;\n\tboardgamecategory: (string | null)[];\n\tboardgamemechanic: (string | null)[];\n\tboardgamefamily: (string | null)[];\n\tboardgamedesigner: (string | null)[];\n\tboardgameartist: (string | null)[];\n\tboardgamepublisher: (string | null)[];\n};\n\nconst getTagValue = (elem: Element, name: string) => {\n\treturn elem.getElementsByTagName(name)[0].getAttribute('value');\n};\n\nconst getLinkValue = (elem: Element, name: string) => {\n\treturn Array.from(elem.querySelectorAll(`link[type=${name}]`)).map(link => link.getAttribute('value'));\n};\n\nconst getDataObjectFromThing = (thing: Element): CollectionDataObject => {\n    return {\n\t\tid: thing.getAttribute('id'),\n\t\tname: thing.querySelector('name[type=\"primary\"]')!.getAttribute('value'),\n\t\tdescription: thing.getElementsByTagName('description')[0].innerHTML,\n\t\timage: thing.getElementsByTagName('image')[0].innerHTML,\n        thumbnail: thing.getElementsByTagName('thumbnail')[0].innerHTML,\n        yearpublished: getTagValue(thing, 'yearpublished'),\n        minplayers: getTagValue(thing, 'minplayers'),\n        maxplayers: getTagValue(thing, 'maxplayers'),\n        playingtime: getTagValue(thing, 'playingtime'),\n        minplaytime: getTagValue(thing, 'minplaytime'),\n        maxplaytime: getTagValue(thing, 'maxplaytime'),\n        boardgamecategory: getLinkValue(thing, 'boardgamecategory'),\n        boardgamemechanic: getLinkValue(thing, 'boardgamemechanic'),\n        boardgamefamily: getLinkValue(thing, 'boardgamefamily'),\n        boardgamedesigner: getLinkValue(thing, 'boardgamedesigner'),\n        boardgameartist: getLinkValue(thing, 'boardgameartist'),\n        boardgamepublisher: getLinkValue(thing, 'boardgamepublisher')\n\t};\n};\n\nconst BoardGameGeekAPI = {\n    getCollectionForUser: (username: string) => {\n        return fetch(`https://www.boardgamegeek.com/xmlapi2/collection?username=${username}&excludesubtype=boardgameexpansion&own=1`)\n            .then((response: Response) => response.text())\n            .then((text: string) => {\n                let domParser = new DOMParser();\n                return domParser.parseFromString(text, \"text/xml\");\n            })\n            .then((xmlCollectionResponse) => {\n                return Promise.all(Array.from(xmlCollectionResponse.getElementsByTagName('item')).map(collectionItem => {\n                    const id = collectionItem.getAttribute('objectid')!;\n                    return BoardGameGeekAPI.getBoardGame(id);\n                }));\n            })\n            .catch((error) => {\n\t\t\t\tconsole.log(`Error: ${error}`);\n\t\t\t\treturn [{error: error}];\n            });\n    },\n\n    getBoardGame: async (id: string) => {\n\t\treturn fetch(`https://www.boardgamegeek.com/xmlapi2/thing?id=${id}&type=boardgame`)\n\t\t\t.then((response: Response) => response.text())\n\t\t\t.then((text: string) => {\n                let domParser = new DOMParser();\n            \treturn domParser.parseFromString(text, \"text/xml\").getElementsByTagName('item')[0];\n\t\t\t})\n\t\t\t.then((xmlThingResponse) => {\n                return getDataObjectFromThing(xmlThingResponse);\n\t\t\t});\n\t}\n};\n\nexport default BoardGameGeekAPI;\n","import React, { useState, useEffect } from 'react';\n\nimport SortSelect from './searchbar/SortSelect';\nimport SearchField from './searchbar/SearchField';\n\nimport BoardGameGeekAPI from '../BoardGameGeekAPI';\n\nimport './SearchBar.css';\n\ntype SearchBarProps = {\n    collection: Array<Record<string, any>>;\n\tsetCollection: (collection: Array<Record<string, any>>) => void;\n\tcollectionSort: string;\n\tsetCollectionSort: (collectionSort: string) => void;\n};\n\nexport default function SearchBar(props: SearchBarProps) {\n    let [username, setUsername] = useState('');\n\n    const updateCollection = props.setCollection;\n\n    useEffect(() => {\n        if (username !== '') {\n    \t\tBoardGameGeekAPI.getCollectionForUser(username)\n    \t\t\t.then((userCollection: any[]) => {\n    \t\t\t\tupdateCollection(userCollection);\n    \t\t\t});\n        }\n\t}, [username, updateCollection]);\n\n\treturn (\n        <div className=\"search-bar\">\n            <SearchField setUsername={setUsername} />\n            <SortSelect currentSort={props.collectionSort} selectSort={props.setCollectionSort} />\n\t\t</div>\n\t);\n}\n","import React, { useState } from 'react';\nimport BoardGameGallery from './components/BoardGameGallery';\nimport SearchBar from './components/SearchBar';\n\nimport './App.css';\n\nfunction App() {\n    let [collection, setCollection] = useState(Array<Record<string, any>>());\n    let [collectionSort, setCollectionSort] = useState('name');\n\n\tlet gallery;\n\n    if (collection.length && collection[0].hasOwnProperty('error')) {\n        gallery = (\n\t\t\t<div className='bgg-error'>\n\t\t\t\t<div>\n        \t\t\tSorry, something has gone wrong.<br/>\n    \t\t\t\tTry again in a few minutes.\n    \t\t\t</div>\n\t\t\t</div>\n        );\n    } else {\n\t\tgallery = (<BoardGameGallery games={collection} sort={collectionSort} />);\n    }\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SearchBar\n\t\t\t\tcollection={collection}\n\t\t\t\tsetCollection={setCollection}\n\t\t\t\tcollectionSort={collectionSort}\n\t\t\t\tsetCollectionSort={setCollectionSort}\n\t\t\t/>\n          \t{gallery}\n    \t</div>\n  \t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}