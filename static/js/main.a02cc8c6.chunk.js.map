{"version":3,"sources":["FilterDefinitions.ts","BoardGameActions.ts","components/BoardGameGallery.tsx","components/searchbar/SortSelect.tsx","components/searchbar/SearchField.tsx","components/searchbar/filters/RangeSliderFilter.tsx","components/searchbar/filters/YearPublishedFilter.tsx","components/searchbar/filters/CheckListFilter.tsx","components/searchbar/filters/FilterList.tsx","components/searchbar/FilterDrawer.tsx","BoardGameGeekAPI.ts","components/SearchBar.tsx","App.tsx","index.tsx"],"names":["FilterDefinitions","rangeFilter","gameMin","gameMax","rangeMin","rangeMax","listFilter","gameList","filterList","length","some","val","includes","game","filter","minplayers","maxplayers","min","max","minplaytime","maxplaytime","yearpublished","boardgamecategory","boardgamemechanic","boardgamefamily","boardgamedesigner","boardgameartist","boardgamepublisher","ascendingSorts","BoardGameActions","sortBoardGames","games","sortKey","sort","gameOne","gameTwo","localeCompare","filterBoardGames","filters","Object","keys","map","filterKey","getFilterData","incrementEntry","obj","hasOwnProperty","reduce","filterData","minPlayerCount","Math","maxPlayerCount","minPlayTime","maxPlayTime","years","arr","push","category","mechanic","family","designer","artist","publisher","Infinity","BoardGameGallery","props","filteredSortedGames","className","GridList","cols","cellHeight","title","name","icon","faUser","faClock","GridListTile","key","id","src","image","alt","GridListTileBar","SortSelect","inputLabel","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","FormControl","variant","InputLabel","ref","htmlFor","Select","native","value","currentSort","onChange","e","selectSort","target","inputProps","display","sortable","SearchField","search","setSearch","updateUsername","setUsername","urlParams","URLSearchParams","window","location","has","get","OutlinedInput","onKeyUp","charCode","endAdornment","InputAdornment","position","IconButton","onClick","edge","faSearch","RangeSliderFilter","currentFilter","range","setValue","classes","Typography","gutterBottom","Slider","event","newValue","onChangeCommitted","filterValue","setFilter","valueLabelDisplay","aria-labelledby","track","marks","step","YearPublishedFilter","minYear","maxYear","indexOf","sliderValues","filterYears","CheckListFilter","seeAll","setSeeAll","sortedOptions","options","optionOne","optionTwo","handleChange","filterCat","renderOptionCheckbox","option","toLocaleLowerCase","FormControlLabel","control","Checkbox","color","checked","label","Chip","slice","Collapse","in","unmountOnExit","Button","FilterList","collection","setFilters","gameData","rangeFilters","console","log","List","disablePadding","ListSubheader","closeDrawer","ListItem","undefined","results","newFilter","yearPublishedFilter","filterName","resultsObject","FilterDrawer","drawerOpen","setDrawerOpen","filterNumber","setFilterNumber","updateCollectionFilters","setCollectionFilter","size","SwipeableDrawer","open","onClose","onOpen","anchor","getTagValue","elem","getElementsByTagName","getAttribute","getLinkValue","Array","from","querySelectorAll","link","BoardGameGeekAPI","getCollectionForUser","username","fetch","then","response","text","DOMParser","parseFromString","xmlCollectionResponse","Promise","all","collectionItem","getBoardGame","catch","error","a","xmlThingResponse","thing","querySelector","description","innerHTML","thumbnail","playingtime","SearchBar","updateCollection","setCollection","userCollection","AppBar","Toolbar","collectionSort","setCollectionSort","setCollectionFilters","App","gallery","collectionFilters","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a02cc8c6.chunk.js","sourcesContent":["type FilterDefinitionType = Record<string, (...args: any) => boolean>;\n\nconst FilterDefinitions: FilterDefinitionType = {\n\trangeFilter: (gameMin: number, gameMax: number, rangeMin: number, rangeMax: number) => {\n    \treturn (\n    \t\t(gameMin >= rangeMin ||\n    \t\tgameMax >= rangeMin) &&\n    \t\t(gameMin <= rangeMax ||\n    \t\tgameMax <= rangeMax)\n    \t);\n\t},\n\tlistFilter: (gameList: string[], filterList: string[]) => {\n    \tif (filterList.length) {\n    \t\treturn gameList.some(val => filterList.includes(val));\n    \t} else {\n        \treturn true;\n    \t}\n\t},\n\t'playercount': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.rangeFilter(game.minplayers, game.maxplayers, filter.min, filter.max);\n\t},\n    'playtime': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.rangeFilter(game.minplaytime, game.maxplaytime, filter.min, filter.max);\n\t},\n    'yearpublished': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.rangeFilter(game.yearpublished, game.yearpublished, filter.min, filter.max);\n\t},\n    'boardgamecategory': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamecategory, filter);\n\t},\n    'boardgamemechanic': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamemechanic, filter);\n\t},\n    'boardgamefamily': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamefamily, filter);\n\t},\n    'boardgamedesigner': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamedesigner, filter);\n\t},\n    'boardgameartist': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgameartist, filter);\n\t},\n    'boardgamepublisher': (game: Record<string, any>, filter: Record<string, any>) => {\n\t\treturn FilterDefinitions.listFilter(game.boardgamepublisher, filter);\n\t},\n};\n\nexport default FilterDefinitions;\n","import FilterDefinitions from './FilterDefinitions';\n\nconst ascendingSorts = ['maxplayers'];\n\nconst BoardGameActions = {\n\tsortBoardGames: (games: Array<Record<string, any>>, sortKey: string) => {\n        games.sort((gameOne, gameTwo) => {\n            if (ascendingSorts.includes(sortKey)) {\n                return gameTwo[sortKey] - gameOne[sortKey];\n            } else if (sortKey === 'name') {\n\t\t\t\treturn gameOne[sortKey].localeCompare(gameTwo[sortKey]);\n            } else {\n            \treturn gameOne[sortKey] - gameTwo[sortKey];\n            }\n    \t});\n\n    \treturn games;\n\t},\n\tfilterBoardGames: (games: Array<Record<string, any>>, filters: Record<string, any>) => {\n\t\treturn games.filter(game => {\n\t\t\tconst filterBools = Object.keys(filters).map(filterKey => {\n\t\t\t\treturn FilterDefinitions[filterKey](game, filters[filterKey]);\n\t\t\t});\n\n\t\t\treturn !filterBools.includes(false);\n\t\t});\n\t},\n\tgetFilterData: (games: Array<Record<string, any>>) => {\n        const addIfNotPresent = (arr: string[], val: string) => {\n\t\t\tif (!arr.includes(val)) {\n    \t\t\tarr.push(val);\n    \t\t\tarr.sort();\n\t\t\t}\n\t\t\t\n\t\t\treturn arr;\n    \t};\n\n    \tconst incrementEntry = (obj: Record<string, number>, val: string) => {\n\t\t\tif (obj.hasOwnProperty(val)) {\n    \t\t\tobj[val] += 1;\n\t\t\t} else {\n    \t\t\tobj[val] = 1;\n\t\t\t}\n\n\t\t\treturn obj;\n    \t};\n\n    \treturn games.reduce((filterData: Record<string, any>, game: Record<string, any>) => {\n        \treturn {\n\t\t\t\tminPlayerCount: Math.min(filterData.minPlayerCount, game.minplayers),\n\t\t\t\tmaxPlayerCount: Math.max(filterData.maxPlayerCount, game.maxplayers),\n\t\t\t\tminPlayTime: Math.min(filterData.minPlayTime, game.minplaytime),\n\t\t\t\tmaxPlayTime: Math.max(filterData.maxPlayTime, game.maxplaytime),\n\t\t\t\tyears: addIfNotPresent(filterData.years, game.yearpublished),\n                category: game.boardgamecategory.reduce(incrementEntry, filterData.category),\n    \t\t\tmechanic: game.boardgamemechanic.reduce(incrementEntry, filterData.mechanic),\n    \t\t\tfamily: game.boardgamefamily.reduce(incrementEntry, filterData.family),\n    \t\t\tdesigner: game.boardgamedesigner.reduce(incrementEntry, filterData.designer),\n    \t\t\tartist: game.boardgameartist.reduce(incrementEntry, filterData.artist),\n    \t\t\tpublisher: game.boardgamepublisher.reduce(incrementEntry, filterData.publisher)\n        \t};\n    \t}, {\n\t\t\tminPlayerCount: Infinity,\n\t\t\tmaxPlayerCount: -Infinity,\n\t\t\tminPlayTime: Infinity,\n\t\t\tmaxPlayTime: -Infinity,\n\t\t\tyears: [],\n\t\t\tcategory: {},\n\t\t\tmechanic: {},\n\t\t\tfamily: {},\n\t\t\tdesigner: {},\n\t\t\tartist: {},\n\t\t\tpublisher: {}\n       \t});\n\t}\n};\n\nexport default BoardGameActions;\n","import React from 'react';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faClock } from '@fortawesome/free-solid-svg-icons';\n\nimport BoardGameActions from '../BoardGameActions';\n\nimport './BoardGameGallery.css';\n\ntype BoardGameGalleryProps = {\n\tgames: Array<Record<string, any>>;\n\tsort: string;\n\tfilters: Record<string, any>;\n};\n\nexport default function BoardGameGallery(props: BoardGameGalleryProps) {\n    const filteredSortedGames = BoardGameActions.sortBoardGames(\n    \tBoardGameActions.filterBoardGames(\n    \t\tprops.games,\n    \t\tprops.filters\n    \t),\n    \tprops.sort\n    );\n\n    const renderBoardGame = (game: Record<string, any>) => {\n        const title = (\n\t\t\t<div className=\"game-info-bar\">\n\t\t\t\t<div className=\"title\">{game.name}</div>\n\t\t\t\t<div className=\"players\">\n\t\t\t\t\t<FontAwesomeIcon icon={faUser} />\n\t\t\t\t\t{(game.minplayers === game.maxplayers) ? (\n    \t\t\t\t\t`${game.minplayers}`\n    \t\t\t\t) : (\n    \t\t\t\t\t`${game.minplayers}-${game.maxplayers}`\n    \t\t\t\t)}\n    \t\t\t</div>\n    \t\t\t<div className=\"time\">\n\t\t\t\t\t<FontAwesomeIcon icon={faClock} />\n\t\t\t\t\t{(game.minplaytime === game.maxplaytime) ? (\n    \t\t\t\t\t`${game.minplaytime}`\n    \t\t\t\t) : (\n    \t\t\t\t\t`${game.minplaytime}-${game.maxplaytime}`\n    \t\t\t\t)}\n    \t\t\t</div>\n\t\t\t</div>\n        );\n\t\treturn (\n    \t\t\t<GridListTile key={game.id}>\n    \t\t\t\t<img src={game.image} alt={game.name} />\n    \t\t\t\t<GridListTileBar title={title} />\n    \t\t\t</GridListTile>\n\t\t);\n\t};\n\n\treturn (\n        <div className=\"board-game-gallery\">\n            <GridList cols={4} cellHeight={250}>\n        \t\t{filteredSortedGames.map(renderBoardGame)}\n      \t\t</GridList>\n      \t</div>\n\t);\n}\n\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\n\ntype SortSelectProps = {\n    currentSort: string;\n\tselectSort: (sort: string) => void;\n};\n\nexport default function SortSelect(props: SortSelectProps) {\n    const sortableColumns = [\n\t\t{name: 'name', display: 'Name'},\n\t\t{name: 'yearpublished', display: 'Year Published'},\n    \t{name: 'minplayers', display: 'Minimum Players'},\n        {name: 'maxplayers', display: 'Maximum Players'},\n        {name: 'playingtime', display: 'Play Time'}\n    ];\n\n    const inputLabel = useRef<HTMLLabelElement>(null);\n\tconst [labelWidth, setLabelWidth] = useState(0);\n\tuseEffect(() => {\n\t    setLabelWidth(inputLabel.current!.offsetWidth);\n\t}, []);\n\n\treturn (\n        <FormControl variant='outlined' className='search-bar-input collection-sort'>\n            <InputLabel ref={inputLabel} htmlFor='outlined-sort-native-simple'>Sort</InputLabel>\n            <Select\n                native\n                value={props.currentSort}\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => {\n                    props.selectSort(e.target.value as string);\n                }}\n                labelWidth={labelWidth}\n                inputProps={{\n                    name: 'sort',\n                    id: 'outlined-sort-native-simple',\n                }}\n            >\n                {sortableColumns.map(sortable => {\n                    return (\n                    \t<option value={sortable.name} key={sortable.name}>\n                    \t\t{sortable.display}\n                        </option>\n\t\t\t\t\t);\n                })}\n            </Select>\n        </FormControl>\n\t);\n};\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControl from '@material-ui/core/FormControl';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\ntype SearchFieldProps = {\n\tsetUsername: (username: string) => void;\n};\n\nexport default function SearchField(props: SearchFieldProps) {\n    let [search, setSearch] = useState('');\n\n    let updateUsername = props.setUsername;\n\n    useEffect(() => {\n        const urlParams = new URLSearchParams(window.location.search);\n\n        if (urlParams.has('username')) {\n\t\t\tupdateUsername(urlParams.get('username') as string);\n\t\t\tsetSearch(urlParams.get('username') as string);\n        }\n    }, [updateUsername]);\n\n    const inputLabel = useRef<HTMLLabelElement>(null);\n\tconst [labelWidth, setLabelWidth] = useState(0);\n\tuseEffect(() => {\n\t    setLabelWidth(inputLabel.current!.offsetWidth);\n\t}, []);\n\n    const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tif (e.charCode === 13 || e.key === 'Enter') {\n\t\t\tupdateUsername(search);\n\t\t}\n\t};\n\n    const renderSearchButton = () => {\n        return (\n\t\t\t<InputAdornment position='end'>\n                <IconButton\n                \tonClick={() => updateUsername(search)}\n                \tclassName='search-bar-button'\n                \tedge='end'\n                >\n                    <FontAwesomeIcon icon={faSearch} />\n                </IconButton>\n\t\t\t</InputAdornment>\n        );\n    };\n\n\treturn (\n        <FormControl className='search-bar-input username-search' variant='outlined'>\n            <InputLabel ref={inputLabel} htmlFor='username-search'>Username</InputLabel>\n\t\t\t<OutlinedInput\n                id='username-search'\n                value={search}\n                onKeyUp={handleKeyUp}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => { setSearch(e.target.value); }}\n                endAdornment={renderSearchButton()}\n                labelWidth={labelWidth}\n            />\n\t\t</FormControl>\n\t);\n};\n","import React, { useState } from 'react';\n\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\ntype RangeSliderFilterProps = {\n    title: string;\n    classes: string;\n\trange: Record<string, number>;\n\tcurrentFilter?: number[];\n\tstep?: number | null;\n\ttrack: false | 'normal' | 'inverted';\n\tsetFilter: (count: number[]) => void;\n};\n\nexport default function RangeSliderFilter(props: RangeSliderFilterProps) {\n\tconst [value, setValue] = useState(() => {\n\t\tif (props.currentFilter) {\n        \treturn props.currentFilter;\n        } else {\n            return [props.range.min, props.range.max];\n        }\n    });\n\n\tconst handleChange = (event: any, newValue: number | number[]) => {\n        setValue(newValue as number[]);\n\t};\n\n\tconst handleChangeCommit = (event: any, filterValue: number | number[]) => {\n\t\tprops.setFilter(filterValue as number[]);\n\t};\n    \n\treturn (\n\t\t<div className={`${props.classes} range-slider-filter`}>\n\t\t\t<Typography variant='h6' className='filter-list-item-title' gutterBottom>\n\t\t\t\t{props.title}\n\t\t\t</Typography>\n\t\t\t<Typography variant='subtitle1'>\n\t\t\t\t{value[0]} - {value[1]}\n    \t\t</Typography>\n            <Slider\n                id='range-slider'\n                value={value}\n                onChange={handleChange}\n                onChangeCommitted={handleChangeCommit}\n                valueLabelDisplay='off'\n                aria-labelledby='range-slider'\n                min={props.range.min}\n                max={props.range.max}\n                track={props.track}\n                marks={true}\n                step={props.step}\n            />\n\t\t</div>\n\t);\n};\n\n","import React, { useState } from 'react';\n\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\ntype YearPublishedFilterProps = {\n\tyears: number[];\n\tcurrentFilter?: number[];\n\tsetFilter: (count: number[]) => void;\n};\n\nexport default function YearPublishedFilter(props: YearPublishedFilterProps) {\n\tconst [value, setValue] = useState(() => {\n\t\tif (props.currentFilter) {\n    \t\tconst minYear = props.currentFilter[0];\n    \t\tconst maxYear = props.currentFilter[1];\n        \treturn [props.years.indexOf(minYear), props.years.indexOf(maxYear)];\n        } else {\n            return [0, props.years.length - 1];\n        }\n    });\n\n\tconst handleChange = (event: any, newValue: number | number[]) => {\n        setValue(newValue as number[]);\n\t};\n\n\tconst handleChangeCommit = (event: any, filterValue: number | number[]) => {\n    \tconst sliderValues = filterValue as number[];\n    \tconst filterYears = [props.years[sliderValues[0]], props.years[sliderValues[1]]];\n\t\tprops.setFilter(filterYears);\n\t};\n    \n\treturn (\n\t\t<div className='year-published-slider range-slider-filter'>\n\t\t\t<Typography variant='h6' className='filter-list-item-title' gutterBottom>\n\t\t\t\tYear Published\n\t\t\t</Typography>\n\t\t\t<Typography variant='subtitle1'>\n\t\t\t\t{props.years[value[0]]} - {props.years[value[1]]}\n    \t\t</Typography>\n            <Slider\n                id='range-slider'\n                value={value}\n                onChange={handleChange}\n                onChangeCommitted={handleChangeCommit}\n                valueLabelDisplay='off'\n                aria-labelledby='range-slider'\n                min={0}\n                max={props.years.length - 1}\n                marks={true}\n            />\n\t\t</div>\n\t);\n};\n\n\n","import React, { useState } from 'react';\n\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Collapse from '@material-ui/core/Collapse';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\ntype CheckListFilterProps = {\n\ttitle: string;\n\tclasses: string;\n\toptions: Record<string, number>;\n\tcurrentFilter: string[];\n\tsetFilter: (filters: string[]) => void;\n};\n\nexport default function CheckListFilter(props: CheckListFilterProps) {\n    const [seeAll, setSeeAll] = useState(false);\n\n    const sortedOptions = Object.keys(props.options).sort((optionOne, optionTwo) => {\n\t\treturn props.options[optionTwo] - props.options[optionOne];\n    });\n\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    \tconst category = e.target!.value;\n    \tif (props.currentFilter.includes(category)) {\n\t\t\tprops.setFilter(props.currentFilter.filter(filterCat => filterCat !== category));\n    \t} else {\n        \tprops.setFilter([...props.currentFilter, category]);\n    \t}\n\t};\n\n    const renderOptionCheckbox = (option: string) => {\n\t\treturn (\n\t\t\t<div className='check-list-option' key={option.toLocaleLowerCase()}>\n    \t\t\t<FormControlLabel\n    \t\t\t\tcontrol={\n               \t\t\t <Checkbox\n               \t\t\t \tcolor='default'\n               \t\t\t \tchecked={props.currentFilter.includes(option)}\n               \t\t\t \tonChange={handleChange}\n               \t\t\t \tvalue={option}\n               \t\t\t />\n    \t\t\t\t}\n    \t\t\t\tlabel={option}\n    \t\t\t/>\n    \t\t\t<Chip label={`${props.options[option]}`} variant='outlined' />\n    \t\t</div>\n\t\t);\n    };\n    \n\treturn (\n        <div className={props.classes}>\n        \t<Typography variant='h6' className='filter-list-item-title' gutterBottom>\n        \t\t{props.title}\n            </Typography>\n            <div className='check-list-container'>\n                {sortedOptions.slice(0,10).map(renderOptionCheckbox)}\n                <Collapse in={seeAll} unmountOnExit>\n\t\t\t\t\t{sortedOptions.slice(10).map(renderOptionCheckbox)}\n                </Collapse>\n                <Button onClick={() => setSeeAll(!seeAll)}>\n\t\t\t\t\t{seeAll ? 'Hide' : 'See All'}\n                </Button>\n            </div>\n        </div>\n\t);\n};\n","import React from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport RangeSliderFilter from './RangeSliderFilter';\nimport YearPublishedFilter from './YearPublishedFilter';\nimport CheckListFilter from './CheckListFilter';\n\nimport BoardGameActions from '../../../BoardGameActions';\n\ntype FilterListProps = {\n\tcollection: Array<Record<string, any>>;\n\tfilters: Record<string, any>;\n\tsetFilters: (filters: Record<string, any>) => void;\n\tcloseDrawer: () => void;\n};\n\nexport default function FilterList(props: FilterListProps) {\n\tconst collection = props.collection;\n\tconst filters = props.filters;\n\tconst setFilters = props.setFilters;\n\n    const gameData = BoardGameActions.getFilterData(collection);\n\n\tconst rangeFilters = [\n\t\t{\n\t\t\tfilter: 'playercount',\n\t\t\ttitle: 'Player Count',\n\t\t\ttrack: 'normal',\n\t\t\tstep: 1,\n\t\t\trange: {min: gameData.minPlayerCount, max: gameData.maxPlayerCount}\n    \t},\n    \t{\n\t\t\tfilter: 'playtime',\n\t\t\ttitle: 'Play Time',\n\t\t\ttrack: 'normal',\n\t\t\tstep: 5,\n\t\t\trange: {min: gameData.minPlayTime, max: gameData.maxPlayTime}\n    \t}\n    ];\n    const checklistFilters = ['category', 'mechanic', 'family', 'designer', 'artist', 'publisher'];\n\n    console.log(gameData);\n\n    return (\n\t\t<List disablePadding={true}>\n\t\t\t<ListSubheader>\n\t\t\t\t<Typography variant='h5'>Filters</Typography>\n\t\t\t\t<Button onClick={props.closeDrawer} className='close-btn'>Close</Button>\n\t\t\t</ListSubheader>\n\t\t\t{rangeFilters.map(rangeFilter => {\n\t\t\t\treturn (\n\t\t\t\t\t<ListItem key={rangeFilter.filter}>\n    \t\t\t\t\t<RangeSliderFilter\n    \t\t\t\t\t\ttitle={rangeFilter.title}\n    \t\t\t\t\t\tclasses={`${rangeFilter.filter}-slider`}\n    \t\t\t\t\t\ttrack={rangeFilter.track as (false | 'normal' | 'inverted')}\n    \t\t\t\t\t\tstep={rangeFilter.step}\n    \t\t\t\t\t\trange={rangeFilter.range}\n    \t\t\t\t\t\tcurrentFilter={filters[rangeFilter.filter] ?\n        \t\t\t\t\t\t[filters[rangeFilter.filter].min, filters[rangeFilter.filter].max] :\n        \t\t\t\t\t\tundefined\n        \t\t\t\t\t}\n        \t\t\t\t\tsetFilter={results => {\n    \t\t\t\t\t\t\tconst newFilter: Record<string, any> = {};\n    \t\t\t\t\t\t\tnewFilter[rangeFilter.filter] = {\n    \t\t\t\t\t\t\t\tmin: results[0],\n    \t\t\t\t\t\t\t\tmax: results[1]\n    \t\t\t\t\t\t\t};\n    \t\t\t\t\t\t\tsetFilters({...filters, ...newFilter});\n        \t\t\t\t\t}}\n        \t\t\t\t/>\n        \t\t\t</ListItem>\n\t\t\t\t);\n\t\t\t})}\n            <ListItem>\n\t\t\t\t<YearPublishedFilter\n\t\t\t\t\tyears={gameData.years}\n\t\t\t\t\tcurrentFilter={filters['yearpublished'] ?\n\t\t\t\t\t\t[filters['yearpublished'].min, filters['yearpublished'].max] :\n\t\t\t\t\t\tundefined\n\t\t\t\t\t}\n                    setFilter={(years) => {\n\t\t\t\t\t\tconst yearPublishedFilter = {'yearpublished': {\n    \t\t\t\t\t\tmin: years[0],\n    \t\t\t\t\t\tmax: years[1]\n\t\t\t\t\t\t}};\n\t\t\t\t\t\tsetFilters({...filters, ...yearPublishedFilter});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</ListItem>\n\t\t\t{checklistFilters.map(filter => {\n                const filterName = `boardgame${filter}`;\n\t\t\t\treturn (\n\t\t\t\t\t<ListItem key={filterName}>\n\t\t\t\t\t\t<CheckListFilter\n\t\t\t\t\t\t\ttitle={filter}\n\t\t\t\t\t\t\tclasses={`${filter}-checklist`}\n\t\t\t\t\t\t\toptions={gameData[filter]}\n\t\t\t\t\t\t\tcurrentFilter={filters[filterName] || []}\n\t\t\t\t\t\t\tsetFilter={(results) => {\n    \t\t\t\t\t\t\tlet resultsObject: Record<string, any> = {};\n    \t\t\t\t\t\t\tresultsObject[filterName] = results;\n\t\t\t\t\t\t\t\tsetFilters({...filters, ...resultsObject});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ListItem>\n\t\t\t\t);\n\t\t\t})}\n\t\t</List>\n\t);\n};\n","import React, { useState, useEffect } from 'react';\n\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\n\nimport FilterList from './filters/FilterList';\n\nimport './FilterDrawer.css';\n\ntype FilterDrawerProps = {\n    collection: Array<Record<string, any>>;\n\tsetCollectionFilter: (test: Record<string, any>) => void;\n};\n\nexport default function FilterDrawer(props: FilterDrawerProps) {\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    const [filterNumber, setFilterNumber] = useState(0);\n    const [filters, setFilters] = useState({} as Record<string, any>);\n\n    const updateCollectionFilters = props.setCollectionFilter;\n\n    useEffect(() => {\n        setFilterNumber(Object.keys(filters).length);\n\t\tupdateCollectionFilters(filters);\n    }, [filters, updateCollectionFilters]);\n\n\treturn (\n\t\t<div className='filter-drawer-btn-wrapper'>\n        \t<Button onClick={() => setDrawerOpen(true)} className='search-bar-input' variant='outlined'>\n        \t\tFilters\n        \t\t<Chip variant='outlined' size='small' label={filterNumber} />\n        \t</Button>\n        \t<SwipeableDrawer\n                className='filter-drawer-wrapper'\n        \t\topen={drawerOpen}\n        \t\tonClose={() => setDrawerOpen(false)}\n        \t\tonOpen={() => setDrawerOpen(true)}\n        \t\tanchor='bottom'\n        \t>\n    \t\t\t<FilterList\n    \t\t\t\tcollection={props.collection}\n    \t\t\t\tfilters={filters}\n    \t\t\t\tsetFilters={setFilters}\n    \t\t\t\tcloseDrawer={() => setDrawerOpen(false)}\n    \t\t\t/>\n        \t</SwipeableDrawer>\n    \t</div>\n\t);\n};\n","type CollectionDataObject = {\n\tid: string | null;\n\tname: string | null;\n\tdescription: string | null;\n\timage: string | null;\n\tthumbnail: string | null;\n\tyearpublished: string | null;\n\tminplayers: string | null;\n\tmaxplayers: string | null;\n\tplayingtime: string | null;\n\tminplaytime: string | null;\n\tmaxplaytime: string | null;\n\tboardgamecategory: (string | null)[];\n\tboardgamemechanic: (string | null)[];\n\tboardgamefamily: (string | null)[];\n\tboardgamedesigner: (string | null)[];\n\tboardgameartist: (string | null)[];\n\tboardgamepublisher: (string | null)[];\n};\n\nconst getTagValue = (elem: Element, name: string) => {\n\treturn elem.getElementsByTagName(name)[0].getAttribute('value');\n};\n\nconst getLinkValue = (elem: Element, name: string) => {\n\treturn Array.from(elem.querySelectorAll(`link[type=${name}]`)).map(link => link.getAttribute('value'));\n};\n\nconst getDataObjectFromThing = (thing: Element): CollectionDataObject => {\n    return {\n\t\tid: thing.getAttribute('id'),\n\t\tname: thing.querySelector('name[type=\"primary\"]')!.getAttribute('value'),\n\t\tdescription: thing.getElementsByTagName('description')[0].innerHTML,\n\t\timage: thing.getElementsByTagName('image')[0].innerHTML,\n        thumbnail: thing.getElementsByTagName('thumbnail')[0].innerHTML,\n        yearpublished: getTagValue(thing, 'yearpublished'),\n        minplayers: getTagValue(thing, 'minplayers'),\n        maxplayers: getTagValue(thing, 'maxplayers'),\n        playingtime: getTagValue(thing, 'playingtime'),\n        minplaytime: getTagValue(thing, 'minplaytime'),\n        maxplaytime: getTagValue(thing, 'maxplaytime'),\n        boardgamecategory: getLinkValue(thing, 'boardgamecategory'),\n        boardgamemechanic: getLinkValue(thing, 'boardgamemechanic'),\n        boardgamefamily: getLinkValue(thing, 'boardgamefamily'),\n        boardgamedesigner: getLinkValue(thing, 'boardgamedesigner'),\n        boardgameartist: getLinkValue(thing, 'boardgameartist'),\n        boardgamepublisher: getLinkValue(thing, 'boardgamepublisher')\n\t};\n};\n\nconst BoardGameGeekAPI = {\n    getCollectionForUser: (username: string) => {\n        return fetch(`https://www.boardgamegeek.com/xmlapi2/collection?username=${username}&excludesubtype=boardgameexpansion&own=1`)\n            .then((response: Response) => response.text())\n            .then((text: string) => {\n                let domParser = new DOMParser();\n                return domParser.parseFromString(text, \"text/xml\");\n            })\n            .then((xmlCollectionResponse) => {\n                return Promise.all(Array.from(xmlCollectionResponse.getElementsByTagName('item')).map(collectionItem => {\n                    const id = collectionItem.getAttribute('objectid')!;\n                    return BoardGameGeekAPI.getBoardGame(id);\n                }));\n            })\n            .catch((error) => {\n\t\t\t\tconsole.log(`Error: ${error}`);\n\t\t\t\treturn [{error: error}];\n            });\n    },\n\n    getBoardGame: async (id: string) => {\n\t\treturn fetch(`https://www.boardgamegeek.com/xmlapi2/thing?id=${id}&type=boardgame`)\n\t\t\t.then((response: Response) => response.text())\n\t\t\t.then((text: string) => {\n                let domParser = new DOMParser();\n            \treturn domParser.parseFromString(text, \"text/xml\").getElementsByTagName('item')[0];\n\t\t\t})\n\t\t\t.then((xmlThingResponse) => {\n                return getDataObjectFromThing(xmlThingResponse);\n\t\t\t});\n\t}\n};\n\nexport default BoardGameGeekAPI;\n","import React, { useState, useEffect } from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport SortSelect from './searchbar/SortSelect';\nimport SearchField from './searchbar/SearchField';\nimport FilterDrawer from './searchbar/FilterDrawer';\n\nimport BoardGameGeekAPI from '../BoardGameGeekAPI';\n\nimport './SearchBar.css';\n\ntype SearchBarProps = {\n    collection: Array<Record<string, any>>;\n\tsetCollection: (collection: Array<Record<string, any>>) => void;\n\tcollectionSort: string;\n\tsetCollectionSort: (collectionSort: string) => void;\n\tsetCollectionFilters: (collectionFilters: Record<string, any>) => void;\n};\n\nexport default function SearchBar(props: SearchBarProps) {\n    let [username, setUsername] = useState('');\n\n    const updateCollection = props.setCollection;\n\n    useEffect(() => {\n        if (username !== '') {\n    \t\tBoardGameGeekAPI.getCollectionForUser(username)\n    \t\t\t.then((userCollection: any[]) => {\n    \t\t\t\tupdateCollection(userCollection);\n    \t\t\t});\n        }\n\t}, [username, updateCollection]);\n\n\treturn (\n\t\t<AppBar className='search-bar' position='sticky'>\n\t\t\t<Toolbar>\n                <SearchField setUsername={setUsername} />\n                <SortSelect currentSort={props.collectionSort} selectSort={props.setCollectionSort} />\n                <FilterDrawer\n\t\t\t\t\tcollection={props.collection}\n                \tsetCollectionFilter={props.setCollectionFilters}\n                />\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t);\n}\n","import React, { useState } from 'react';\nimport BoardGameGallery from './components/BoardGameGallery';\nimport SearchBar from './components/SearchBar';\n\nimport './App.css';\n\nfunction App() {\n    const [collection, setCollection] = useState(Array<Record<string, any>>());\n    const [collectionSort, setCollectionSort] = useState('name');\n    const [collectionFilters, setCollectionFilters] = useState({});\n\n\tlet gallery;\n\n    if (collection.length && collection[0].hasOwnProperty('error')) {\n        gallery = (\n\t\t\t<div className='bgg-error'>\n\t\t\t\t<div>\n        \t\t\tSorry, something has gone wrong.<br/>\n    \t\t\t\tTry again in a few minutes.\n    \t\t\t</div>\n\t\t\t</div>\n        );\n    } else {\n\t\tgallery = (\n\t\t\t<BoardGameGallery\n\t\t\t\tgames={collection}\n\t\t\t\tsort={collectionSort}\n\t\t\t\tfilters={collectionFilters}\n\t\t\t/>\n\t\t);\n    }\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SearchBar\n\t\t\t\tcollection={collection}\n\t\t\t\tsetCollection={setCollection}\n\t\t\t\tcollectionSort={collectionSort}\n\t\t\t\tsetCollectionSort={setCollectionSort}\n\t\t\t\tsetCollectionFilters={setCollectionFilters}\n\t\t\t/>\n          \t{gallery}\n    \t</div>\n  \t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}